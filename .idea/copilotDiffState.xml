<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.DanaBalApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.DanaBala&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:screenOrientation=&quot;portrait&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MathExercisesActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.NumberIntroductionActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.NumberRecognitionActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.CountingActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ObjectCountingActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MatchingActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.AudioMatchingActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;!-- Новые упражнения на последовательности --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AscendingSequenceActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.DescendingSequenceActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;!-- Отдельные страницы результатов для каждого упражнения --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NumberRecognitionResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.NumberRecognitionActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.CountingResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.CountingActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ObjectCountingResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ObjectCountingActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MatchingResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MatchingActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.AudioMatchingResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.AudioMatchingActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;!-- Страницы результатов для новых упражнений --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AscendingSequenceResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.AscendingSequenceActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.DescendingSequenceResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.DescendingSequenceActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.DanaBalApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.DanaBala&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:screenOrientation=&quot;portrait&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MathExercisesActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.NumberIntroductionActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.NumberRecognitionActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.CountingActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ObjectCountingActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MatchingActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.AudioMatchingActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;!-- Новые упражнения на последовательности --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AscendingSequenceActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.DescendingSequenceActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;!-- Упражнение на сравнение чисел --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NumberComparisonActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MathExercisesActivity&quot;&#10;            android:screenOrientation=&quot;landscape&quot; /&gt;&#10;&#10;        &lt;!-- Отдельные страницы результатов для каждого упражнения --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NumberRecognitionResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.NumberRecognitionActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.CountingResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.CountingActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ObjectCountingResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ObjectCountingActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MatchingResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MatchingActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.AudioMatchingResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.AudioMatchingActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;!-- Страницы результатов для новых упражнений --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AscendingSequenceResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.AscendingSequenceActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.DescendingSequenceResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.DescendingSequenceActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;!-- Страница результатов для упражнения сравнения чисел --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NumberComparisonResultsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.NumberComparisonActivity&quot;&#10;            android:screenOrientation=&quot;landscape&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/AchievementManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/AchievementManager.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.content.Context&#10;&#10;class AchievementManager(context: Context) {&#10;    private val progressManager = ProgressManager(context)&#10;    &#10;    data class Achievement(&#10;        val id: String,&#10;        val title: String,&#10;        val description: String,&#10;        val emoji: String,&#10;        val isUnlocked: Boolean = false&#10;    )&#10;&#10;    fun checkAchievements(trainingType: String): List&lt;Achievement&gt; {&#10;        val newAchievements = mutableListOf&lt;Achievement&gt;()&#10;        val completed = progressManager.getCompletedTrainings(trainingType)&#10;        val successRate = progressManager.getSuccessRate(trainingType)&#10;        val bestScore = progressManager.getBestScore(trainingType)&#10;&#10;        // Достижения за количество тренировок&#10;        when (completed) {&#10;            1 -&gt; newAchievements.add(Achievement(&#10;                &quot;${trainingType}_first&quot;, &quot;Первые шаги&quot;, &#10;                &quot;Прошел первую тренировку!&quot;, &quot;&quot;&#10;            ))&#10;            5 -&gt; newAchievements.add(Achievement(&#10;                &quot;${trainingType}_5th&quot;, &quot;Упорный ученик&quot;, &#10;                &quot;Прошел 5 тренировок!&quot;, &quot;&quot;&#10;            ))&#10;            10 -&gt; newAchievements.add(Achievement(&#10;                &quot;${trainingType}_10th&quot;, &quot;Знаток&quot;, &#10;                &quot;Прошел 10 тренировок!&quot;, &quot;&quot;&#10;            ))&#10;        }&#10;&#10;        // Достижения за качество&#10;        if (successRate &gt;= 90 &amp;&amp; completed &gt;= 3) {&#10;            newAchievements.add(Achievement(&#10;                &quot;${trainingType}_perfectionist&quot;, &quot;Перфекционист&quot;, &#10;                &quot;Успешность 90%+!&quot;, &quot;⭐&quot;&#10;            ))&#10;        }&#10;&#10;        // Достижения за безошибочное прохождение&#10;        if (trainingType == &quot;numbers&quot; &amp;&amp; bestScore &gt;= 18) {&#10;            newAchievements.add(Achievement(&#10;                &quot;${trainingType}_master&quot;, &quot;Мастер цифр&quot;, &#10;                &quot;Почти идеальный результат!&quot;, &quot;&quot;&#10;            ))&#10;        } else if (trainingType == &quot;letters&quot; &amp;&amp; bestScore &gt;= 30) {&#10;            newAchievements.add(Achievement(&#10;                &quot;${trainingType}_master&quot;, &quot;Мастер букв&quot;, &#10;                &quot;Почти идеальный результат!&quot;, &quot;&quot;&#10;            ))&#10;        }&#10;&#10;        return newAchievements&#10;    }&#10;&#10;    fun getAllAchievements(): List&lt;Achievement&gt; {&#10;        return listOf(&#10;            // Математика&#10;            Achievement(&quot;numbers_first&quot;, &quot;Первые шаги&quot;, &quot;Прошел первую тренировку по математике!&quot;, &quot;&quot;),&#10;            Achievement(&quot;numbers_5th&quot;, &quot;Упорный ученик&quot;, &quot;Прошел 5 тренировок по математике!&quot;, &quot;&quot;),&#10;            Achievement(&quot;numbers_10th&quot;, &quot;Знаток математики&quot;, &quot;Прошел 10 тренировок по математике!&quot;, &quot;&quot;),&#10;            Achievement(&quot;numbers_perfectionist&quot;, &quot;Перфекционист&quot;, &quot;Успешность 90%+ в математике!&quot;, &quot;⭐&quot;),&#10;            Achievement(&quot;numbers_master&quot;, &quot;Мастер цифр&quot;, &quot;Почти идеальный результат!&quot;, &quot;&quot;),&#10;            &#10;            // Чтение&#10;            Achievement(&quot;letters_first&quot;, &quot;Первые шаги&quot;, &quot;Прошел первую тренировку по чтению!&quot;, &quot;&quot;),&#10;            Achievement(&quot;letters_5th&quot;, &quot;Упорный ученик&quot;, &quot;Прошел 5 тренировок по чтению!&quot;, &quot;&quot;),&#10;            Achievement(&quot;letters_10th&quot;, &quot;Знаток чтения&quot;, &quot;Прошел 10 тренировок по чтению!&quot;, &quot;&quot;),&#10;            Achievement(&quot;letters_perfectionist&quot;, &quot;Перфекционист&quot;, &quot;Успешность 90%+ в чтении!&quot;, &quot;⭐&quot;),&#10;            Achievement(&quot;letters_master&quot;, &quot;Мастер букв&quot;, &quot;Почти идеальный результат!&quot;, &quot;&quot;)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/LetterRecognitionActivityFixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/LetterRecognitionActivityFixed.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;import android.speech.tts.TextToSpeech&#10;import android.util.Log&#10;import android.view.View&#10;import android.view.animation.BounceInterpolator&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class LetterRecognitionActivityFixed : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var targetLetter = &quot;А&quot;&#10;    private var currentQuestion = 0&#10;    private val totalQuestions = 33 // 33 буквы в русском алфавите&#10;    private var tts: TextToSpeech? = null&#10;    private var isTtsReady = false&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private var currentQuestionText = &quot;&quot;&#10;&#10;    // Переменные для отслеживания ошибок&#10;    private var correctAnswersCount = 0&#10;    private var answersWithErrors = 0&#10;    private var currentQuestionHasError = false&#10;&#10;    // Список доступных букв для избежания повторов&#10;    private val availableLetters = mutableListOf&lt;String&gt;()&#10;&#10;    // Русский алфавит&#10;    private val russianAlphabet = arrayOf(&#10;        &quot;А&quot;, &quot;Б&quot;, &quot;В&quot;, &quot;Г&quot;, &quot;Д&quot;, &quot;Е&quot;, &quot;Ё&quot;, &quot;Ж&quot;, &quot;З&quot;, &quot;И&quot;, &quot;Й&quot;, &quot;К&quot;, &quot;Л&quot;, &quot;М&quot;, &quot;Н&quot;, &quot;О&quot;, &quot;П&quot;,&#10;        &quot;Р&quot;, &quot;С&quot;, &quot;Т&quot;, &quot;У&quot;, &quot;Ф&quot;, &quot;Х&quot;, &quot;Ц&quot;, &quot;Ч&quot;, &quot;Ш&quot;, &quot;Щ&quot;, &quot;Ъ&quot;, &quot;Ы&quot;, &quot;Ь&quot;, &quot;Э&quot;, &quot;Ю&quot;, &quot;Я&quot;&#10;    )&#10;&#10;    // Правильное произношение букв для TTS&#10;    private val letterPronunciation = mapOf(&#10;        &quot;А&quot; to &quot;А&quot;,&#10;        &quot;Б&quot; to &quot;БЭ&quot;,&#10;        &quot;В&quot; to &quot;ВЭ&quot;,&#10;        &quot;Г&quot; to &quot;ГЭ&quot;,&#10;        &quot;Д&quot; to &quot;ДЭ&quot;,&#10;        &quot;Е&quot; to &quot;Е&quot;,&#10;        &quot;Ё&quot; to &quot;Ё&quot;,&#10;        &quot;Ж&quot; to &quot;ЖЭ&quot;,&#10;        &quot;З&quot; to &quot;ЗЭ&quot;,&#10;        &quot;И&quot; to &quot;И&quot;,&#10;        &quot;Й&quot; to &quot;И КРАТКОЕ&quot;,&#10;        &quot;К&quot; to &quot;КА&quot;,&#10;        &quot;Л&quot; to &quot;ЭЛЬ&quot;,&#10;        &quot;М&quot; to &quot;ЭМ&quot;,&#10;        &quot;Н&quot; to &quot;ЭН&quot;,&#10;        &quot;О&quot; to &quot;ОООО&quot;,&#10;        &quot;П&quot; to &quot;ПЭ&quot;,&#10;        &quot;Р&quot; to &quot;ЭР&quot;,&#10;        &quot;С&quot; to &quot;ЭС&quot;,&#10;        &quot;Т&quot; to &quot;ТЭ&quot;,&#10;        &quot;У&quot; to &quot;У&quot;,&#10;        &quot;Ф&quot; to &quot;ЭФ&quot;,&#10;        &quot;Х&quot; to &quot;ХА&quot;,&#10;        &quot;Ц&quot; to &quot;ЦЭ&quot;,&#10;        &quot;Ч&quot; to &quot;ЧЭ&quot;,&#10;        &quot;Ш&quot; to &quot;ША&quot;,&#10;        &quot;Щ&quot; to &quot;ЩА&quot;,&#10;        &quot;Ъ&quot; to &quot;ТВЁРДЫЙ ЗНАК&quot;,&#10;        &quot;Ы&quot; to &quot;Ы&quot;,&#10;        &quot;Ь&quot; to &quot;МЯГКИЙ ЗНАК&quot;,&#10;        &quot;Э&quot; to &quot;Э&quot;,&#10;        &quot;Ю&quot; to &quot;Ю&quot;,&#10;        &quot;Я&quot; to &quot;Я&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_letter_recognition)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация списка доступных букв&#10;        initializeAvailableLetters()&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        setupBackButton()&#10;        setupSpeakerButton()&#10;        &#10;        // Убираем текст вопроса - делаем его невидимым&#10;        findViewById&lt;TextView&gt;(R.id.questionText).visibility = View.GONE&#10;        &#10;        startNewQuestion()&#10;    }&#10;&#10;    private fun initializeAvailableLetters() {&#10;        availableLetters.clear()&#10;        availableLetters.addAll(russianAlphabet)&#10;        availableLetters.shuffle()&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts?.setLanguage(Locale(&quot;ru&quot;))&#10;            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {&#10;                Log.e(&quot;TTS&quot;, &quot;Русский язык не поддерживается, используем английский&quot;)&#10;                tts?.language = Locale.getDefault()&#10;            }&#10;            isTtsReady = true&#10;&#10;            // Озвучиваем вопрос сразу, если он уже готов&#10;            if (currentQuestionText.isNotEmpty()) {&#10;                // Небольшая задержка для первого вопроса&#10;                handler.postDelayed({&#10;                    speakQuestion()&#10;                }, 500)&#10;            }&#10;        } else {&#10;            Log.e(&quot;TTS&quot;, &quot;Инициализация TTS не удалась&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupBackButton() {&#10;        findViewById&lt;View&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun setupSpeakerButton() {&#10;        findViewById&lt;ImageView&gt;(R.id.speakerButton).setOnClickListener {&#10;            speakQuestion()&#10;        }&#10;    }&#10;&#10;    private fun speakQuestion() {&#10;        if (isTtsReady &amp;&amp; currentQuestionText.isNotEmpty()) {&#10;            tts?.speak(currentQuestionText, TextToSpeech.QUEUE_FLUSH, null, &quot;question&quot;)&#10;        }&#10;    }&#10;&#10;    private fun vibrateOnError() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            val vibratorManager = getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager&#10;            val vibrator = vibratorManager.defaultVibrator&#10;            vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            val vibrator = getSystemService(Context.VIBRATOR_SERVICE) as Vibrator&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;            } else {&#10;                @Suppress(&quot;DEPRECATION&quot;)&#10;                vibrator.vibrate(200)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startNewQuestion() {&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            showResultsScreen()&#10;            return&#10;        }&#10;&#10;        currentQuestion++&#10;        currentQuestionHasError = false&#10;&#10;        // Получаем следующую букву из списка доступных&#10;        if (availableLetters.isEmpty()) {&#10;            initializeAvailableLetters()&#10;        }&#10;        targetLetter = availableLetters.removeAt(0)&#10;&#10;        // Обновляем вопрос с правильным произношением&#10;        val letterName = letterPronunciation[targetLetter] ?: targetLetter&#10;        val questionText = &quot;Найди букву $letterName&quot;&#10;        currentQuestionText = questionText&#10;&#10;        // Озвучиваем вопрос (если TTS готов)&#10;        if (isTtsReady) {&#10;            speakQuestion()&#10;        }&#10;&#10;        // Обновляем прогресс-бар&#10;        val progressBar = findViewById&lt;ProgressBar&gt;(R.id.progressBar)&#10;        progressBar.progress = (currentQuestion * 100) / totalQuestions&#10;&#10;        // Генерируем 4 случайные буквы, одна из которых правильная&#10;        val letters = generateLetterOptions(targetLetter)&#10;&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        val letterTexts = listOf(&#10;            findViewById&lt;TextView&gt;(R.id.letter1),&#10;            findViewById&lt;TextView&gt;(R.id.letter2),&#10;            findViewById&lt;TextView&gt;(R.id.letter3),&#10;            findViewById&lt;TextView&gt;(R.id.letter4)&#10;        )&#10;&#10;        // Заполняем карточки&#10;        for (i in 0..3) {&#10;            letterTexts[i].text = letters[i]&#10;            cards[i].setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;            cards[i].isClickable = true&#10;            animateCardEntrance(cards[i], i * 100L)&#10;&#10;            cards[i].setOnClickListener {&#10;                checkAnswer(letters[i], cards[i])&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateCardEntrance(card: CardView, delay: Long) {&#10;        card.alpha = 0f&#10;        card.scaleX = 0.5f&#10;        card.scaleY = 0.5f&#10;&#10;        card.animate()&#10;            .alpha(1f)&#10;            .scaleX(1f)&#10;            .scaleY(1f)&#10;            .setDuration(300)&#10;            .setStartDelay(delay)&#10;            .setInterpolator(BounceInterpolator())&#10;            .start()&#10;    }&#10;&#10;    private fun generateLetterOptions(correct: String): List&lt;String&gt; {&#10;        val options = mutableSetOf&lt;String&gt;()&#10;        options.add(correct)&#10;&#10;        while (options.size &lt; 4) {&#10;            val randomLetter = russianAlphabet[Random.nextInt(russianAlphabet.size)]&#10;            options.add(randomLetter)&#10;        }&#10;&#10;        return options.shuffled()&#10;    }&#10;&#10;    private fun checkAnswer(selectedLetter: String, selectedCard: CardView) {&#10;        if (selectedLetter == targetLetter) {&#10;            // Правильный ответ&#10;            if (currentQuestionHasError) {&#10;                answersWithErrors++&#10;            } else {&#10;                correctAnswersCount++&#10;            }&#10;&#10;            animateCorrectAnswer(selectedCard)&#10;            tts?.speak(&quot;Молодец!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;correct&quot;)&#10;            disableAllCards()&#10;&#10;            handler.postDelayed({&#10;                startNewQuestion()&#10;            }, 2000)&#10;        } else {&#10;            // Неправильный ответ&#10;            currentQuestionHasError = true&#10;            animateWrongAnswer(selectedCard)&#10;            vibrateOnError()&#10;            tts?.speak(&quot;Попробуй ещё раз, у тебя получится!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;wrong&quot;)&#10;            selectedCard.isClickable = false&#10;        }&#10;    }&#10;&#10;    private fun disableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;        cards.forEach { it.isClickable = false }&#10;    }&#10;&#10;    private fun animateCorrectAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        val scaleUpX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1f, 1.3f)&#10;        val scaleUpY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1f, 1.3f)&#10;        val scaleDownX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1.3f, 1f)&#10;        val scaleDownY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1.3f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.play(scaleUpX).with(scaleUpY)&#10;        animatorSet.play(scaleDownX).with(scaleDownY).after(scaleUpX)&#10;        animatorSet.duration = 200&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateWrongAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;&#10;        val shake = ObjectAnimator.ofFloat(card, &quot;translationX&quot;, 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun showResultsScreen() {&#10;        val intent = Intent(this, ResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;total&quot;, totalQuestions)&#10;        intent.putExtra(&quot;correctAnswersCount&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;answersWithErrors&quot;, answersWithErrors)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/LetterRecognitionActivity_fixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/LetterRecognitionActivity_fixed.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;import android.speech.tts.TextToSpeech&#10;import android.util.Log&#10;import android.view.View&#10;import android.view.animation.BounceInterpolator&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class LetterRecognitionActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var targetLetter = &quot;А&quot;&#10;    private var currentQuestion = 0&#10;    private val totalQuestions = 33 // 33 буквы в русском алфавите&#10;    private var tts: TextToSpeech? = null&#10;    private var isTtsReady = false&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private var currentQuestionText = &quot;&quot;&#10;&#10;    // Переменные для отслеживания ошибок&#10;    private var correctAnswersCount = 0&#10;    private var answersWithErrors = 0&#10;    private var currentQuestionHasError = false&#10;&#10;    // Список доступных букв для избежания повторов&#10;    private val availableLetters = mutableListOf&lt;String&gt;()&#10;&#10;    // Русский алфавит&#10;    private val russianAlphabet = arrayOf(&#10;        &quot;А&quot;, &quot;Б&quot;, &quot;В&quot;, &quot;Г&quot;, &quot;Д&quot;, &quot;Е&quot;, &quot;Ё&quot;, &quot;Ж&quot;, &quot;З&quot;, &quot;И&quot;, &quot;Й&quot;, &quot;К&quot;, &quot;Л&quot;, &quot;М&quot;, &quot;Н&quot;, &quot;О&quot;, &quot;П&quot;,&#10;        &quot;Р&quot;, &quot;С&quot;, &quot;Т&quot;, &quot;У&quot;, &quot;Ф&quot;, &quot;Х&quot;, &quot;Ц&quot;, &quot;Ч&quot;, &quot;Ш&quot;, &quot;Щ&quot;, &quot;Ъ&quot;, &quot;Ы&quot;, &quot;Ь&quot;, &quot;Э&quot;, &quot;Ю&quot;, &quot;Я&quot;&#10;    )&#10;&#10;    // Правильное произношение букв для TTS&#10;    private val letterPronunciation = mapOf(&#10;        &quot;А&quot; to &quot;А&quot;,&#10;        &quot;Б&quot; to &quot;БЭ&quot;, &#10;        &quot;В&quot; to &quot;ВЭ&quot;,&#10;        &quot;Г&quot; to &quot;ГЭ&quot;,&#10;        &quot;Д&quot; to &quot;ДЭ&quot;,&#10;        &quot;Е&quot; to &quot;Е&quot;,&#10;        &quot;Ё&quot; to &quot;Ё&quot;,&#10;        &quot;Ж&quot; to &quot;ЖЭ&quot;,&#10;        &quot;З&quot; to &quot;ЗЭ&quot;,&#10;        &quot;И&quot; to &quot;И&quot;,&#10;        &quot;Й&quot; to &quot;И КРАТКОЕ&quot;,&#10;        &quot;К&quot; to &quot;КА&quot;,&#10;        &quot;Л&quot; to &quot;ЭЛЬ&quot;,&#10;        &quot;М&quot; to &quot;ЭМ&quot;,&#10;        &quot;Н&quot; to &quot;ЭН&quot;,&#10;        &quot;О&quot; to &quot;О-О&quot;,&#10;        &quot;П&quot; to &quot;ПЭ&quot;,&#10;        &quot;Р&quot; to &quot;ЭР&quot;,&#10;        &quot;С&quot; to &quot;ЭС&quot;,&#10;        &quot;Т&quot; to &quot;ТЭ&quot;,&#10;        &quot;У&quot; to &quot;У&quot;,&#10;        &quot;Ф&quot; to &quot;ЭФ&quot;,&#10;        &quot;Х&quot; to &quot;ХА&quot;,&#10;        &quot;Ц&quot; to &quot;ЦЭ&quot;,&#10;        &quot;Ч&quot; to &quot;ЧЭ&quot;,&#10;        &quot;Ш&quot; to &quot;ША&quot;,&#10;        &quot;Щ&quot; to &quot;ЩА&quot;,&#10;        &quot;Ъ&quot; to &quot;ТВЁРДЫЙ ЗНАК&quot;,&#10;        &quot;Ы&quot; to &quot;Ы&quot;,&#10;        &quot;Ь&quot; to &quot;МЯГКИЙ ЗНАК&quot;,&#10;        &quot;Э&quot; to &quot;Э&quot;,&#10;        &quot;Ю&quot; to &quot;Ю&quot;,&#10;        &quot;Я&quot; to &quot;Я&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_letter_recognition)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация списка доступных букв&#10;        initializeAvailableLetters()&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        setupBackButton()&#10;        setupSpeakerButton()&#10;        startNewQuestion()&#10;    }&#10;&#10;    private fun initializeAvailableLetters() {&#10;        availableLetters.clear()&#10;        availableLetters.addAll(russianAlphabet)&#10;        availableLetters.shuffle()&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts?.setLanguage(Locale(&quot;ru&quot;))&#10;            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {&#10;                Log.e(&quot;TTS&quot;, &quot;Русский язык не поддерживается, используем английский&quot;)&#10;                tts?.language = Locale.getDefault()&#10;            }&#10;            isTtsReady = true&#10;&#10;            // Озвучиваем вопрос сразу, если он уже готов&#10;            if (currentQuestionText.isNotEmpty()) {&#10;                speakQuestion()&#10;            }&#10;        } else {&#10;            Log.e(&quot;TTS&quot;, &quot;Инициализация TTS не удалась&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupBackButton() {&#10;        findViewById&lt;View&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun setupSpeakerButton() {&#10;        findViewById&lt;ImageView&gt;(R.id.speakerButton).setOnClickListener {&#10;            speakQuestion()&#10;        }&#10;    }&#10;&#10;    private fun speakQuestion() {&#10;        if (isTtsReady &amp;&amp; currentQuestionText.isNotEmpty()) {&#10;            tts?.speak(currentQuestionText, TextToSpeech.QUEUE_FLUSH, null, &quot;question&quot;)&#10;        }&#10;    }&#10;&#10;    private fun vibrateOnError() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            val vibratorManager = getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager&#10;            val vibrator = vibratorManager.defaultVibrator&#10;            vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            val vibrator = getSystemService(Context.VIBRATOR_SERVICE) as Vibrator&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;            } else {&#10;                @Suppress(&quot;DEPRECATION&quot;)&#10;                vibrator.vibrate(200)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startNewQuestion() {&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            showResultsScreen()&#10;            return&#10;        }&#10;&#10;        currentQuestion++&#10;        currentQuestionHasError = false&#10;&#10;        // Получаем следующую букву из списка доступных&#10;        if (availableLetters.isEmpty()) {&#10;            initializeAvailableLetters()&#10;        }&#10;        targetLetter = availableLetters.removeAt(0)&#10;&#10;        // Формируем текст вопроса с правильным произношением для TTS&#10;        val letterName = letterPronunciation[targetLetter] ?: targetLetter&#10;        currentQuestionText = &quot;Найди букву $letterName&quot;&#10;&#10;        // Озвучиваем вопрос сразу (если TTS готов)&#10;        if (isTtsReady) {&#10;            speakQuestion()&#10;        }&#10;&#10;        // Обновляем прогресс-бар&#10;        val progressBar = findViewById&lt;ProgressBar&gt;(R.id.progressBar)&#10;        progressBar.progress = (currentQuestion * 100) / totalQuestions&#10;&#10;        // Генерируем 4 случайные буквы, одна из которых правильная&#10;        val letters = generateLetterOptions(targetLetter)&#10;&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        val letterTexts = listOf(&#10;            findViewById&lt;TextView&gt;(R.id.letter1),&#10;            findViewById&lt;TextView&gt;(R.id.letter2),&#10;            findViewById&lt;TextView&gt;(R.id.letter3),&#10;            findViewById&lt;TextView&gt;(R.id.letter4)&#10;        )&#10;&#10;        // Заполняем карточки&#10;        for (i in 0..3) {&#10;            letterTexts[i].text = letters[i]&#10;            cards[i].setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;            cards[i].isClickable = true&#10;            animateCardEntrance(cards[i], i * 100L)&#10;&#10;            cards[i].setOnClickListener {&#10;                checkAnswer(letters[i], cards[i])&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateCardEntrance(card: CardView, delay: Long) {&#10;        card.alpha = 0f&#10;        card.scaleX = 0.5f&#10;        card.scaleY = 0.5f&#10;&#10;        card.animate()&#10;            .alpha(1f)&#10;            .scaleX(1f)&#10;            .scaleY(1f)&#10;            .setDuration(300)&#10;            .setStartDelay(delay)&#10;            .setInterpolator(BounceInterpolator())&#10;            .start()&#10;    }&#10;&#10;    private fun generateLetterOptions(correct: String): List&lt;String&gt; {&#10;        val options = mutableSetOf&lt;String&gt;()&#10;        options.add(correct)&#10;&#10;        while (options.size &lt; 4) {&#10;            val randomLetter = russianAlphabet[Random.nextInt(russianAlphabet.size)]&#10;            options.add(randomLetter)&#10;        }&#10;&#10;        return options.shuffled()&#10;    }&#10;&#10;    private fun checkAnswer(selectedLetter: String, selectedCard: CardView) {&#10;        if (selectedLetter == targetLetter) {&#10;            // Правильный ответ&#10;            if (currentQuestionHasError) {&#10;                answersWithErrors++&#10;            } else {&#10;                correctAnswersCount++&#10;            }&#10;&#10;            animateCorrectAnswer(selectedCard)&#10;            tts?.speak(&quot;Молодец!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;correct&quot;)&#10;            disableAllCards()&#10;&#10;            handler.postDelayed({&#10;                startNewQuestion()&#10;            }, 2000)&#10;        } else {&#10;            // Неправильный ответ&#10;            currentQuestionHasError = true&#10;            animateWrongAnswer(selectedCard)&#10;            vibrateOnError()&#10;            tts?.speak(&quot;Попробуй ещё раз, у тебя получится!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;wrong&quot;)&#10;            selectedCard.isClickable = false&#10;        }&#10;    }&#10;&#10;    private fun disableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;        cards.forEach { it.isClickable = false }&#10;    }&#10;&#10;    private fun animateCorrectAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        val scaleUpX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1f, 1.3f)&#10;        val scaleUpY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1f, 1.3f)&#10;        val scaleDownX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1.3f, 1f)&#10;        val scaleDownY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1.3f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.play(scaleUpX).with(scaleUpY)&#10;        animatorSet.play(scaleDownX).with(scaleDownY).after(scaleUpX)&#10;        animatorSet.duration = 200&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateWrongAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;&#10;        val shake = ObjectAnimator.ofFloat(card, &quot;translationX&quot;, 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun showResultsScreen() {&#10;        val intent = Intent(this, ResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;total&quot;, totalQuestions)&#10;        intent.putExtra(&quot;correctAnswersCount&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;answersWithErrors&quot;, answersWithErrors)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/MatchingActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/MatchingActivity.kt" />
              <option name="originalContent" value="package com.timursarsembayev.danabalanumbersnumbers&#10;&#10;import android.animation.Animator&#10;import android.animation.AnimatorListenerAdapter&#10;import android.animation.ValueAnimator&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import java.util.Locale&#10;import kotlin.random.Random&#10;&#10;class MatchingActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private lateinit var numbersRecyclerView: RecyclerView&#10;    private lateinit var objectsRecyclerView: RecyclerView&#10;    private lateinit var numbersAdapter: NumbersAdapter&#10;    private lateinit var objectsAdapter: ObjectsAdapter&#10;    private lateinit var progressBar: ProgressBar&#10;    private lateinit var backButton: ImageView&#10;&#10;    private var currentLevel = 1&#10;    private var totalLevels = 10&#10;    private var levels = mutableListOf&lt;MatchingLevel&gt;()&#10;    private var currentLevelData: MatchingLevel? = null&#10;&#10;    private var selectedNumberItem: MatchingItem? = null&#10;    private var selectedObjectItem: MatchingItem? = null&#10;    private var selectedNumberView: View? = null&#10;    private var selectedObjectView: View? = null&#10;&#10;    private var completedMatches = 0&#10;    private var totalScore = 0&#10;    private var correctActions = 0&#10;    private var incorrectActions = 0&#10;&#10;    private lateinit var tts: TextToSpeech&#10;    private var isTtsReady = false&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_matching)&#10;&#10;        initTTS()&#10;        initViews()&#10;        initData()&#10;        setupRecyclerViews()&#10;        loadLevel(currentLevel)&#10;    }&#10;&#10;    private fun initTTS() {&#10;        tts = TextToSpeech(this, this)&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts.setLanguage(Locale(&quot;ru&quot;))&#10;            isTtsReady = result != TextToSpeech.LANG_MISSING_DATA &amp;&amp; result != TextToSpeech.LANG_NOT_SUPPORTED&#10;        }&#10;    }&#10;&#10;    private fun speakText(text: String) {&#10;        if (isTtsReady) {&#10;            tts.speak(text, TextToSpeech.QUEUE_FLUSH, null, null)&#10;        }&#10;    }&#10;&#10;    private fun initViews() {&#10;        numbersRecyclerView = findViewById(R.id.numbersRecyclerView)&#10;        objectsRecyclerView = findViewById(R.id.objectsRecyclerView)&#10;        progressBar = findViewById(R.id.progressBar)&#10;        backButton = findViewById(R.id.backButton)&#10;&#10;        backButton.setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun initData() {&#10;        levels = MatchingGameData.generateAllLevels().toMutableList()&#10;    }&#10;&#10;    private fun setupRecyclerViews() {&#10;        numbersAdapter = NumbersAdapter(mutableListOf()) { item, view -&gt;&#10;            onNumberItemClick(item, view)&#10;        }&#10;&#10;        objectsAdapter = ObjectsAdapter(mutableListOf()) { item, view -&gt;&#10;            onObjectItemClick(item, view)&#10;        }&#10;&#10;        numbersRecyclerView.apply {&#10;            layoutManager = LinearLayoutManager(this@MatchingActivity)&#10;            adapter = numbersAdapter&#10;        }&#10;&#10;        objectsRecyclerView.apply {&#10;            layoutManager = LinearLayoutManager(this@MatchingActivity)&#10;            adapter = objectsAdapter&#10;        }&#10;    }&#10;&#10;    private fun loadLevel(level: Int) {&#10;        currentLevelData = levels[level - 1]&#10;        updateProgressBar()&#10;        completedMatches = 0&#10;&#10;        // Перемешиваем элементы для случайного порядка&#10;        val numbers = currentLevelData!!.pairs.map { it.number }.shuffled()&#10;        val objects = currentLevelData!!.pairs.map { it.objects }.shuffled()&#10;&#10;        numbersAdapter.updateItems(numbers)&#10;        objectsAdapter.updateItems(objects)&#10;&#10;        // Сбрасываем выделения&#10;        clearSelections()&#10;&#10;        // Сбрасываем прозрачность всех view после анимаций&#10;        resetViewsAlpha()&#10;    }&#10;&#10;    private fun updateProgressBar() {&#10;        val progress = (currentLevel * 100) / totalLevels&#10;        progressBar.progress = progress&#10;    }&#10;&#10;    private fun resetViewsAlpha() {&#10;        // Сбрасываем прозрачность для всех элементов RecyclerView&#10;        numbersRecyclerView.post {&#10;            for (i in 0 until numbersRecyclerView.childCount) {&#10;                val child = numbersRecyclerView.getChildAt(i)&#10;                child.alpha = 1.0f&#10;                child.scaleX = 1.0f&#10;                child.scaleY = 1.0f&#10;            }&#10;        }&#10;&#10;        objectsRecyclerView.post {&#10;            for (i in 0 until objectsRecyclerView.childCount) {&#10;                val child = objectsRecyclerView.getChildAt(i)&#10;                child.alpha = 1.0f&#10;                child.scaleX = 1.0f&#10;                child.scaleY = 1.0f&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun onNumberItemClick(item: MatchingItem, view: View) {&#10;        if (item.isMatched) return&#10;&#10;        // Убираем предыдущее выделение&#10;        selectedNumberView?.setBackgroundResource(0)&#10;&#10;        if (selectedNumberItem == item) {&#10;            // Отменяем выделение&#10;            clearSelections()&#10;            return&#10;        }&#10;&#10;        selectedNumberItem = item&#10;        selectedNumberView = view&#10;&#10;        // Выделяем элемент&#10;        view.setBackgroundResource(android.R.drawable.editbox_background)&#10;&#10;        // Проверяем совпадение&#10;        checkMatch()&#10;    }&#10;&#10;    private fun onObjectItemClick(item: MatchingItem, view: View) {&#10;        if (item.isMatched) return&#10;&#10;        // Убираем предыдущее выделение&#10;        selectedObjectView?.setBackgroundResource(0)&#10;&#10;        if (selectedObjectItem == item) {&#10;            // Отменяем выделение&#10;            clearSelections()&#10;            return&#10;        }&#10;&#10;        selectedObjectItem = item&#10;        selectedObjectView = view&#10;&#10;        // Выделяем элемент&#10;        view.setBackgroundResource(android.R.drawable.editbox_background)&#10;&#10;        // Проверяем совпадение&#10;        checkMatch()&#10;    }&#10;&#10;    private fun checkMatch() {&#10;        val numberItem = selectedNumberItem&#10;        val objectItem = selectedObjectItem&#10;&#10;        if (numberItem != null &amp;&amp; objectItem != null) {&#10;            if (numberItem.value == objectItem.value) {&#10;                // Правильное совпадение!&#10;                onCorrectMatch(numberItem, objectItem)&#10;            } else {&#10;                // Неправильное совпадение&#10;                onIncorrectMatch()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun onCorrectMatch(numberItem: MatchingItem, objectItem: MatchingItem) {&#10;        // Увеличиваем счетчик правильных действий&#10;        correctActions++&#10;&#10;        // Озвучиваем поощрение&#10;        val randomPhrase = MatchingFeedbackPhrases.correctPhrases[Random.nextInt(MatchingFeedbackPhrases.correctPhrases.size)]&#10;        speakText(randomPhrase)&#10;&#10;        // Отмечаем элементы как сопоставленные&#10;        numberItem.isMatched = true&#10;        objectItem.isMatched = true&#10;&#10;        // Анимация успешного совпадения&#10;        animateMatch(selectedNumberView!!, selectedObjectView!!) {&#10;            // После анимации удаляем элементы с эффектом падения&#10;            numbersAdapter.removeItem(numberItem)&#10;            objectsAdapter.removeItem(objectItem)&#10;&#10;            completedMatches++&#10;&#10;            // Проверяем завершение уровня&#10;            if (completedMatches &gt;= 5) {&#10;                onLevelCompleted()&#10;            }&#10;        }&#10;&#10;        clearSelections()&#10;    }&#10;&#10;    private fun onIncorrectMatch() {&#10;        // Увеличиваем счетчик неправильных действий&#10;        incorrectActions++&#10;&#10;        // Озвучиваем подбадривание&#10;        val randomPhrase = MatchingFeedbackPhrases.incorrectPhrases[Random.nextInt(MatchingFeedbackPhrases.incorrectPhrases.size)]&#10;        speakText(randomPhrase)&#10;&#10;        // Анимация неправильного совпадения&#10;        animateIncorrectMatch(selectedNumberView!!, selectedObjectView!!)&#10;        clearSelections()&#10;    }&#10;&#10;    private fun animateMatch(view1: View, view2: View, onComplete: () -&gt; Unit) {&#10;        val animator1 = ValueAnimator.ofFloat(1f, 0f)&#10;        val animator2 = ValueAnimator.ofFloat(1f, 0f)&#10;&#10;        animator1.duration = 300&#10;        animator2.duration = 300&#10;&#10;        animator1.addUpdateListener { animation -&gt;&#10;            val alpha = animation.animatedValue as Float&#10;            view1.alpha = alpha&#10;            view1.scaleX = alpha&#10;            view1.scaleY = alpha&#10;        }&#10;&#10;        animator2.addUpdateListener { animation -&gt;&#10;            val alpha = animation.animatedValue as Float&#10;            view2.alpha = alpha&#10;            view2.scaleX = alpha&#10;            view2.scaleY = alpha&#10;        }&#10;&#10;        animator1.addListener(object : AnimatorListenerAdapter() {&#10;            override fun onAnimationEnd(animation: Animator) {&#10;                onComplete()&#10;            }&#10;        })&#10;&#10;        animator1.start()&#10;        animator2.start()&#10;    }&#10;&#10;    private fun animateIncorrectMatch(view1: View, view2: View) {&#10;        // Анимация тряски для неправильного совпадения&#10;        val shake = ValueAnimator.ofFloat(0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 600&#10;&#10;        shake.addUpdateListener { animation -&gt;&#10;            val translateX = animation.animatedValue as Float&#10;            view1.translationX = translateX&#10;            view2.translationX = translateX&#10;        }&#10;&#10;        shake.addListener(object : AnimatorListenerAdapter() {&#10;            override fun onAnimationEnd(animation: Animator) {&#10;                view1.translationX = 0f&#10;                view2.translationX = 0f&#10;            }&#10;        })&#10;&#10;        shake.start()&#10;    }&#10;&#10;    private fun clearSelections() {&#10;        selectedNumberItem = null&#10;        selectedObjectItem = null&#10;        selectedNumberView?.setBackgroundResource(0)&#10;        selectedObjectView?.setBackgroundResource(0)&#10;        selectedNumberView = null&#10;        selectedObjectView = null&#10;    }&#10;&#10;    private fun onLevelCompleted() {&#10;        if (currentLevel &lt; totalLevels) {&#10;            // Убираем задержку - сразу переходим на следующий уровень&#10;            currentLevel++&#10;            loadLevel(currentLevel)&#10;        } else {&#10;            // Переход к экрану результатов без задержки&#10;            showResults()&#10;        }&#10;    }&#10;&#10;    private fun showResults() {&#10;        // Вычисляем итоговые очки: +10 за правильные действия, -5 за ошибки&#10;        val finalScore = (correctActions * 10) - (incorrectActions * 5)&#10;&#10;        val intent = Intent(this, MatchingResultsActivity::class.java)&#10;        intent.putExtra(&quot;completed_levels&quot;, currentLevel)&#10;        intent.putExtra(&quot;correct_actions&quot;, correctActions)&#10;        intent.putExtra(&quot;incorrect_actions&quot;, incorrectActions)&#10;        intent.putExtra(&quot;final_score&quot;, finalScore)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        if (::tts.isInitialized) {&#10;            tts.stop()&#10;            tts.shutdown()&#10;        }&#10;        super.onDestroy()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.animation.Animator&#10;import android.animation.AnimatorListenerAdapter&#10;import android.animation.ValueAnimator&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import java.util.Locale&#10;import kotlin.random.Random&#10;&#10;class MatchingActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private lateinit var numbersRecyclerView: RecyclerView&#10;    private lateinit var objectsRecyclerView: RecyclerView&#10;    private lateinit var numbersAdapter: NumbersAdapter&#10;    private lateinit var objectsAdapter: ObjectsAdapter&#10;    private lateinit var progressBar: ProgressBar&#10;    private lateinit var backButton: ImageView&#10;&#10;    private var currentLevel = 1&#10;    private var totalLevels = 10&#10;    private var levels = mutableListOf&lt;MatchingLevel&gt;()&#10;    private var currentLevelData: MatchingLevel? = null&#10;&#10;    private var selectedNumberItem: MatchingItem? = null&#10;    private var selectedObjectItem: MatchingItem? = null&#10;    private var selectedNumberView: View? = null&#10;    private var selectedObjectView: View? = null&#10;&#10;    private var completedMatches = 0&#10;    private var totalScore = 0&#10;    private var correctActions = 0&#10;    private var incorrectActions = 0&#10;&#10;    private lateinit var tts: TextToSpeech&#10;    private var isTtsReady = false&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_matching)&#10;&#10;        initTTS()&#10;        initViews()&#10;        initData()&#10;        setupRecyclerViews()&#10;        loadLevel(currentLevel)&#10;    }&#10;&#10;    private fun initTTS() {&#10;        tts = TextToSpeech(this, this)&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts.setLanguage(Locale(&quot;ru&quot;))&#10;            isTtsReady = result != TextToSpeech.LANG_MISSING_DATA &amp;&amp; result != TextToSpeech.LANG_NOT_SUPPORTED&#10;        }&#10;    }&#10;&#10;    private fun speakText(text: String) {&#10;        if (isTtsReady) {&#10;            tts.speak(text, TextToSpeech.QUEUE_FLUSH, null, null)&#10;        }&#10;    }&#10;&#10;    private fun initViews() {&#10;        numbersRecyclerView = findViewById(R.id.numbersRecyclerView)&#10;        objectsRecyclerView = findViewById(R.id.objectsRecyclerView)&#10;        progressBar = findViewById(R.id.progressBar)&#10;        backButton = findViewById(R.id.backButton)&#10;&#10;        backButton.setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun initData() {&#10;        levels = MatchingGameData.generateAllLevels().toMutableList()&#10;    }&#10;&#10;    private fun setupRecyclerViews() {&#10;        numbersAdapter = NumbersAdapter(mutableListOf()) { item, view -&gt;&#10;            onNumberItemClick(item, view)&#10;        }&#10;&#10;        objectsAdapter = ObjectsAdapter(mutableListOf()) { item, view -&gt;&#10;            onObjectItemClick(item, view)&#10;        }&#10;&#10;        numbersRecyclerView.apply {&#10;            layoutManager = LinearLayoutManager(this@MatchingActivity)&#10;            adapter = numbersAdapter&#10;        }&#10;&#10;        objectsRecyclerView.apply {&#10;            layoutManager = LinearLayoutManager(this@MatchingActivity)&#10;            adapter = objectsAdapter&#10;        }&#10;    }&#10;&#10;    private fun loadLevel(level: Int) {&#10;        currentLevelData = levels[level - 1]&#10;        updateProgressBar()&#10;        completedMatches = 0&#10;&#10;        // Перемешиваем элементы для случайного порядка&#10;        val numbers = currentLevelData!!.pairs.map { it.number }.shuffled()&#10;        val objects = currentLevelData!!.pairs.map { it.objects }.shuffled()&#10;&#10;        numbersAdapter.updateItems(numbers)&#10;        objectsAdapter.updateItems(objects)&#10;&#10;        // Сбрасываем выделения&#10;        clearSelections()&#10;&#10;        // Сбрасываем прозрачность всех view пос��е анимаций&#10;        resetViewsAlpha()&#10;    }&#10;&#10;    private fun updateProgressBar() {&#10;        val progress = (currentLevel * 100) / totalLevels&#10;        progressBar.progress = progress&#10;    }&#10;&#10;    private fun resetViewsAlpha() {&#10;        // Сбрасываем прозрачность для всех элементов RecyclerView&#10;        numbersRecyclerView.post {&#10;            for (i in 0 until numbersRecyclerView.childCount) {&#10;                val child = numbersRecyclerView.getChildAt(i)&#10;                child.alpha = 1.0f&#10;                child.scaleX = 1.0f&#10;                child.scaleY = 1.0f&#10;            }&#10;        }&#10;&#10;        objectsRecyclerView.post {&#10;            for (i in 0 until objectsRecyclerView.childCount) {&#10;                val child = objectsRecyclerView.getChildAt(i)&#10;                child.alpha = 1.0f&#10;                child.scaleX = 1.0f&#10;                child.scaleY = 1.0f&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun onNumberItemClick(item: MatchingItem, view: View) {&#10;        if (item.isMatched) return&#10;&#10;        // Убираем предыдущее выделение&#10;        selectedNumberView?.setBackgroundResource(0)&#10;&#10;        if (selectedNumberItem == item) {&#10;            // Отменяем выделение&#10;            clearSelections()&#10;            return&#10;        }&#10;&#10;        selectedNumberItem = item&#10;        selectedNumberView = view&#10;&#10;        // Выделяем элемент&#10;        view.setBackgroundResource(android.R.drawable.editbox_background)&#10;&#10;        // Проверяем совпадение&#10;        checkMatch()&#10;    }&#10;&#10;    private fun onObjectItemClick(item: MatchingItem, view: View) {&#10;        if (item.isMatched) return&#10;&#10;        // Убираем предыдущее выделение&#10;        selectedObjectView?.setBackgroundResource(0)&#10;&#10;        if (selectedObjectItem == item) {&#10;            // Отменяем выделение&#10;            clearSelections()&#10;            return&#10;        }&#10;&#10;        selectedObjectItem = item&#10;        selectedObjectView = view&#10;&#10;        // Выделяем элемент&#10;        view.setBackgroundResource(android.R.drawable.editbox_background)&#10;&#10;        // Проверяем совпаден��е&#10;        checkMatch()&#10;    }&#10;&#10;    private fun checkMatch() {&#10;        val numberItem = selectedNumberItem&#10;        val objectItem = selectedObjectItem&#10;&#10;        if (numberItem != null &amp;&amp; objectItem != null) {&#10;            if (numberItem.value == objectItem.value) {&#10;                // Правильное совпадение!&#10;                onCorrectMatch(numberItem, objectItem)&#10;            } else {&#10;                // Неправильное совпадение&#10;                onIncorrectMatch()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun onCorrectMatch(numberItem: MatchingItem, objectItem: MatchingItem) {&#10;        // Увеличиваем счетчик правильных действий&#10;        correctActions++&#10;&#10;        // Озвучиваем поощрение&#10;        val randomPhrase = MatchingFeedbackPhrases.correctPhrases[Random.nextInt(MatchingFeedbackPhrases.correctPhrases.size)]&#10;        speakText(randomPhrase)&#10;&#10;        // Отмечаем элементы как сопоставленные&#10;        numberItem.isMatched = true&#10;        objectItem.isMatched = true&#10;&#10;        // Анимация успешного совпадения&#10;        animateMatch(selectedNumberView!!, selectedObjectView!!) {&#10;            // После анимации удаляем элементы с эффектом падения&#10;            numbersAdapter.removeItem(numberItem)&#10;            objectsAdapter.removeItem(objectItem)&#10;&#10;            completedMatches++&#10;&#10;            // Проверяем завершение уровня&#10;            if (completedMatches &gt;= 5) {&#10;                onLevelCompleted()&#10;            }&#10;        }&#10;&#10;        clearSelections()&#10;    }&#10;&#10;    private fun onIncorrectMatch() {&#10;        // Увеличиваем счетчик неправильных действий&#10;        incorrectActions++&#10;&#10;        // Озвучиваем подбадривание&#10;        val randomPhrase = MatchingFeedbackPhrases.incorrectPhrases[Random.nextInt(MatchingFeedbackPhrases.incorrectPhrases.size)]&#10;        speakText(randomPhrase)&#10;&#10;        // Анимация неправильного совпадения&#10;        animateIncorrectMatch(selectedNumberView!!, selectedObjectView!!)&#10;        clearSelections()&#10;    }&#10;&#10;    private fun animateMatch(view1: View, view2: View, onComplete: () -&gt; Unit) {&#10;        val animator1 = ValueAnimator.ofFloat(1f, 0f)&#10;        val animator2 = ValueAnimator.ofFloat(1f, 0f)&#10;&#10;        animator1.duration = 300&#10;        animator2.duration = 300&#10;&#10;        animator1.addUpdateListener { animation -&gt;&#10;            val alpha = animation.animatedValue as Float&#10;            view1.alpha = alpha&#10;            view1.scaleX = alpha&#10;            view1.scaleY = alpha&#10;        }&#10;&#10;        animator2.addUpdateListener { animation -&gt;&#10;            val alpha = animation.animatedValue as Float&#10;            view2.alpha = alpha&#10;            view2.scaleX = alpha&#10;            view2.scaleY = alpha&#10;        }&#10;&#10;        animator1.addListener(object : AnimatorListenerAdapter() {&#10;            override fun onAnimationEnd(animation: Animator) {&#10;                onComplete()&#10;            }&#10;        })&#10;&#10;        animator1.start()&#10;        animator2.start()&#10;    }&#10;&#10;    private fun animateIncorrectMatch(view1: View, view2: View) {&#10;        // Анимация тряски для неправильного совпадения&#10;        val shake = ValueAnimator.ofFloat(0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 600&#10;&#10;        shake.addUpdateListener { animation -&gt;&#10;            val translateX = animation.animatedValue as Float&#10;            view1.translationX = translateX&#10;            view2.translationX = translateX&#10;        }&#10;&#10;        shake.addListener(object : AnimatorListenerAdapter() {&#10;            override fun onAnimationEnd(animation: Animator) {&#10;                view1.translationX = 0f&#10;                view2.translationX = 0f&#10;            }&#10;        })&#10;&#10;        shake.start()&#10;    }&#10;&#10;    private fun clearSelections() {&#10;        selectedNumberItem = null&#10;        selectedObjectItem = null&#10;        selectedNumberView?.setBackgroundResource(0)&#10;        selectedObjectView?.setBackgroundResource(0)&#10;        selectedNumberView = null&#10;        selectedObjectView = null&#10;    }&#10;&#10;    private fun onLevelCompleted() {&#10;        if (currentLevel &lt; totalLevels) {&#10;            // Убираем задержку - сразу переходим на следующий уровень&#10;            currentLevel++&#10;            loadLevel(currentLevel)&#10;        } else {&#10;            // Переход к экрану результатов без задержки&#10;            showResults()&#10;        }&#10;    }&#10;&#10;    private fun showResults() {&#10;        // Вычисляем итоговые очки: +10 за правильные действия, -5 за ошибки&#10;        val finalScore = (correctActions * 10) - (incorrectActions * 5)&#10;&#10;        val intent = Intent(this, MatchingResultsActivity::class.java)&#10;        intent.putExtra(&quot;completed_levels&quot;, currentLevel)&#10;        intent.putExtra(&quot;correct_actions&quot;, correctActions)&#10;        intent.putExtra(&quot;incorrect_actions&quot;, incorrectActions)&#10;        intent.putExtra(&quot;final_score&quot;, finalScore)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        if (::tts.isInitialized) {&#10;            tts.stop()&#10;            tts.shutdown()&#10;        }&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/MathExercisesActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/MathExercisesActivity.kt" />
              <option name="originalContent" value="package com.timursarsembayev.danabalanumbersnumbers&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;&#10;class MathExercisesActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_math_exercises)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        setupExerciseCards()&#10;    }&#10;&#10;    private fun setupExerciseCards() {&#10;        findViewById&lt;CardView&gt;(R.id.cardNumbers).setOnClickListener {&#10;            val intent = Intent(this, NumberRecognitionActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardCounting).setOnClickListener {&#10;            val intent = Intent(this, CountingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardObjectCounting).setOnClickListener {&#10;            val intent = Intent(this, ObjectCountingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardMatching).setOnClickListener {&#10;            val intent = Intent(this, MatchingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;&#10;class MathExercisesActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_math_exercises)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        setupExerciseCards()&#10;    }&#10;&#10;    private fun setupExerciseCards() {&#10;        findViewById&lt;CardView&gt;(R.id.cardNumbers).setOnClickListener {&#10;            val intent = Intent(this, NumberRecognitionActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardCounting).setOnClickListener {&#10;            val intent = Intent(this, CountingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardObjectCounting).setOnClickListener {&#10;            val intent = Intent(this, ObjectCountingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardMatching).setOnClickListener {&#10;            val intent = Intent(this, MatchingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/NumberRecognitionActivity_new.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/NumberRecognitionActivity_new.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;import android.speech.tts.TextToSpeech&#10;import android.util.Log&#10;import android.view.View&#10;import android.view.animation.BounceInterpolator&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class NumberRecognitionActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var targetNumber = 1&#10;    private var currentQuestion = 0&#10;    private val totalQuestions = 20&#10;    private var tts: TextToSpeech? = null&#10;    private var isTtsReady = false&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private var currentQuestionText = &quot;&quot;&#10;&#10;    // Новые переменные для отслеживания ошибок&#10;    private var correctAnswersCount = 0&#10;    private var answersWithErrors = 0&#10;    private var currentQuestionHasError = false&#10;&#10;    // Список доступных цифр для избежания повторов&#10;    private val availableNumbers = mutableListOf&lt;Int&gt;()&#10;&#10;    // Массив прописных чисел (включая 0)&#10;    private val numberWords = arrayOf(&#10;        &quot;ноль&quot;, &quot;один&quot;, &quot;два&quot;, &quot;три&quot;, &quot;четыре&quot;, &quot;пять&quot;,&#10;        &quot;шесть&quot;, &quot;семь&quot;, &quot;восемь&quot;, &quot;девять&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_number_recognition)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация списка доступных цифр (0-9)&#10;        initializeAvailableNumbers()&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        setupBackButton()&#10;        setupSpeakerButton()&#10;        startNewQuestion()&#10;    }&#10;&#10;    private fun initializeAvailableNumbers() {&#10;        availableNumbers.clear()&#10;        // Добавляем цифры от 0 до 9&#10;        for (i in 0..9) {&#10;            availableNumbers.add(i)&#10;        }&#10;        availableNumbers.shuffle()&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts?.setLanguage(Locale(&quot;ru&quot;))&#10;            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {&#10;                Log.e(&quot;TTS&quot;, &quot;Русский язык не поддерживается, используем английский&quot;)&#10;                tts?.language = Locale.getDefault()&#10;            }&#10;            isTtsReady = true&#10;&#10;            // Озвучиваем вопрос сразу, если он уже готов&#10;            if (currentQuestionText.isNotEmpty()) {&#10;                speakQuestion()&#10;            }&#10;        } else {&#10;            Log.e(&quot;TTS&quot;, &quot;Инициализация TTS не удалась&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupBackButton() {&#10;        findViewById&lt;View&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun setupSpeakerButton() {&#10;        findViewById&lt;ImageView&gt;(R.id.speakerButton).setOnClickListener {&#10;            speakQuestion()&#10;        }&#10;&#10;        findViewById&lt;TextView&gt;(R.id.questionText).setOnClickListener {&#10;            speakQuestion()&#10;        }&#10;    }&#10;&#10;    private fun speakQuestion() {&#10;        if (isTtsReady &amp;&amp; currentQuestionText.isNotEmpty()) {&#10;            tts?.speak(currentQuestionText, TextToSpeech.QUEUE_FLUSH, null, &quot;question&quot;)&#10;        }&#10;    }&#10;&#10;    private fun vibrateOnError() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            val vibratorManager = getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager&#10;            val vibrator = vibratorManager.defaultVibrator&#10;            vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            val vibrator = getSystemService(Context.VIBRATOR_SERVICE) as Vibrator&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                vibrator.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))&#10;            } else {&#10;                @Suppress(&quot;DEPRECATION&quot;)&#10;                vibrator.vibrate(200)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startNewQuestion() {&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            showResultsScreen()&#10;            return&#10;        }&#10;&#10;        currentQuestion++&#10;        currentQuestionHasError = false&#10;&#10;        // Получаем следующую цифру из списка доступных&#10;        if (availableNumbers.isEmpty()) {&#10;            initializeAvailableNumbers()&#10;        }&#10;        targetNumber = availableNumbers.removeAt(0)&#10;&#10;        // Обновляем вопрос с прописным числом&#10;        val questionText = &quot;Найди цифру ${numberWords[targetNumber]}&quot;&#10;        findViewById&lt;TextView&gt;(R.id.questionText).text = questionText&#10;        currentQuestionText = questionText&#10;&#10;        // Озвучиваем вопрос сразу (если TTS готов)&#10;        if (isTtsReady) {&#10;            speakQuestion()&#10;        }&#10;&#10;        // Обновляем прогресс-бар&#10;        val progressBar = findViewById&lt;ProgressBar&gt;(R.id.progressBar)&#10;        progressBar.progress = (currentQuestion * 100) / totalQuestions&#10;&#10;        // Генерируем 4 случайные цифры, одна из которых правильная&#10;        val numbers = generateNumberOptions(targetNumber)&#10;&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;&#10;        val numberTexts = listOf(&#10;            findViewById&lt;TextView&gt;(R.id.number1),&#10;            findViewById&lt;TextView&gt;(R.id.number2),&#10;            findViewById&lt;TextView&gt;(R.id.number3),&#10;            findViewById&lt;TextView&gt;(R.id.number4)&#10;        )&#10;&#10;        // Заполняем карточки&#10;        for (i in 0..3) {&#10;            numberTexts[i].text = numbers[i].toString()&#10;            cards[i].setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))&#10;            cards[i].isClickable = true&#10;            animateCardEntrance(cards[i], i * 100L)&#10;&#10;            cards[i].setOnClickListener {&#10;                checkAnswer(numbers[i], cards[i])&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun animateCardEntrance(card: CardView, delay: Long) {&#10;        card.alpha = 0f&#10;        card.scaleX = 0.5f&#10;        card.scaleY = 0.5f&#10;&#10;        card.animate()&#10;            .alpha(1f)&#10;            .scaleX(1f)&#10;            .scaleY(1f)&#10;            .setDuration(300)&#10;            .setStartDelay(delay)&#10;            .setInterpolator(BounceInterpolator())&#10;            .start()&#10;    }&#10;&#10;    private fun generateNumberOptions(correct: Int): List&lt;Int&gt; {&#10;        val options = mutableSetOf&lt;Int&gt;()&#10;        options.add(correct)&#10;&#10;        while (options.size &lt; 4) {&#10;            val randomNum = Random.nextInt(0, 10)&#10;            options.add(randomNum)&#10;        }&#10;&#10;        return options.shuffled()&#10;    }&#10;&#10;    private fun checkAnswer(selectedNumber: Int, selectedCard: CardView) {&#10;        if (selectedNumber == targetNumber) {&#10;            // Правильный ответ&#10;            if (currentQuestionHasError) {&#10;                answersWithErrors++&#10;            } else {&#10;                correctAnswersCount++&#10;            }&#10;&#10;            animateCorrectAnswer(selectedCard)&#10;            tts?.speak(&quot;Молодец!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;correct&quot;)&#10;            disableAllCards()&#10;&#10;            handler.postDelayed({&#10;                startNewQuestion()&#10;            }, 2000)&#10;        } else {&#10;            // Неправильный ответ&#10;            currentQuestionHasError = true&#10;            animateWrongAnswer(selectedCard)&#10;            vibrateOnError() // Добавляем вибрацию&#10;            tts?.speak(&quot;Попробуй ещё раз, у тебя получится!&quot;, TextToSpeech.QUEUE_FLUSH, null, &quot;wrong&quot;)&#10;            selectedCard.isClickable = false&#10;        }&#10;    }&#10;&#10;    private fun disableAllCards() {&#10;        val cards = listOf(&#10;            findViewById&lt;CardView&gt;(R.id.card1),&#10;            findViewById&lt;CardView&gt;(R.id.card2),&#10;            findViewById&lt;CardView&gt;(R.id.card3),&#10;            findViewById&lt;CardView&gt;(R.id.card4)&#10;        )&#10;        cards.forEach { it.isClickable = false }&#10;    }&#10;&#10;    private fun animateCorrectAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        val scaleUpX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1f, 1.3f)&#10;        val scaleUpY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1f, 1.3f)&#10;        val scaleDownX = ObjectAnimator.ofFloat(card, &quot;scaleX&quot;, 1.3f, 1f)&#10;        val scaleDownY = ObjectAnimator.ofFloat(card, &quot;scaleY&quot;, 1.3f, 1f)&#10;&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.play(scaleUpX).with(scaleUpY)&#10;        animatorSet.play(scaleDownX).with(scaleDownY).after(scaleUpX)&#10;        animatorSet.duration = 200&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateWrongAnswer(card: CardView) {&#10;        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;&#10;        val shake = ObjectAnimator.ofFloat(card, &quot;translationX&quot;, 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun showResultsScreen() {&#10;        val intent = Intent(this, ResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, correctAnswersCount) // Только правильные ответы без ошибок&#10;        intent.putExtra(&quot;total&quot;, totalQuestions)&#10;        intent.putExtra(&quot;correctAnswersCount&quot;, correctAnswersCount)&#10;        intent.putExtra(&quot;answersWithErrors&quot;, answersWithErrors)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/ProgressManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/ProgressManager.kt" />
              <option name="updatedContent" value="package com.example.danabala&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;&#10;class ProgressManager(context: Context) {&#10;    private val sharedPreferences: SharedPreferences = &#10;        context.getSharedPreferences(&quot;danabala_progress&quot;, Context.MODE_PRIVATE)&#10;&#10;    // Сохранение результатов тренировки&#10;    fun saveTrainingResult(trainingType: String, score: Int, total: Int, correctAnswers: Int, answersWithErrors: Int) {&#10;        val editor = sharedPreferences.edit()&#10;        &#10;        // Увеличиваем счетчик пройденных тренировок&#10;        val completedCount = getCompletedTrainings(trainingType) + 1&#10;        editor.putInt(&quot;${trainingType}_completed&quot;, completedCount)&#10;        &#10;        // Сохраняем лучший результат&#10;        val bestScore = getBestScore(trainingType)&#10;        if (correctAnswers &gt; bestScore) {&#10;            editor.putInt(&quot;${trainingType}_best_score&quot;, correctAnswers)&#10;            editor.putInt(&quot;${trainingType}_best_total&quot;, total)&#10;        }&#10;        &#10;        // Сохраняем общую статистику&#10;        val totalCorrect = getTotalCorrectAnswers(trainingType) + correctAnswers&#10;        val totalQuestions = getTotalQuestions(trainingType) + total&#10;        editor.putInt(&quot;${trainingType}_total_correct&quot;, totalCorrect)&#10;        editor.putInt(&quot;${trainingType}_total_questions&quot;, totalQuestions)&#10;        &#10;        editor.apply()&#10;    }&#10;&#10;    // Получение количества пройденных тренировок&#10;    fun getCompletedTrainings(trainingType: String): Int {&#10;        return sharedPreferences.getInt(&quot;${trainingType}_completed&quot;, 0)&#10;    }&#10;&#10;    // Получение лучшего результата&#10;    fun getBestScore(trainingType: String): Int {&#10;        return sharedPreferences.getInt(&quot;${trainingType}_best_score&quot;, 0)&#10;    }&#10;&#10;    // Получение общей статистики&#10;    fun getTotalCorrectAnswers(trainingType: String): Int {&#10;        return sharedPreferences.getInt(&quot;${trainingType}_total_correct&quot;, 0)&#10;    }&#10;&#10;    fun getTotalQuestions(trainingType: String): Int {&#10;        return sharedPreferences.getInt(&quot;${trainingType}_total_questions&quot;, 0)&#10;    }&#10;&#10;    // Получение процента правильных ответов&#10;    fun getSuccessRate(trainingType: String): Int {&#10;        val total = getTotalQuestions(trainingType)&#10;        val correct = getTotalCorrectAnswers(trainingType)&#10;        return if (total &gt; 0) (correct * 100) / total else 0&#10;    }&#10;&#10;    // Сброс прогресса (для отладки)&#10;    fun resetProgress() {&#10;        sharedPreferences.edit().clear().apply()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/AppDatabase.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local&#10;&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;import androidx.room.TypeConverters&#10;import android.content.Context&#10;import com.example.danabala.data.local.dao.ExerciseResultDao&#10;import com.example.danabala.data.local.dao.UserDao&#10;import com.example.danabala.data.local.entity.ExerciseResultEntity&#10;import com.example.danabala.data.local.entity.UserEntity&#10;&#10;/**&#10; * Основная база данных приложения&#10; */&#10;@Database(&#10;    entities = [UserEntity::class, ExerciseResultEntity::class],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;@TypeConverters(Converters::class)&#10;abstract class AppDatabase : RoomDatabase() {&#10;    abstract fun userDao(): UserDao&#10;    abstract fun exerciseResultDao(): ExerciseResultDao&#10;&#10;    companion object {&#10;        const val DATABASE_NAME = &quot;danabala_database&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/Converters.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/Converters.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local&#10;&#10;import androidx.room.TypeConverter&#10;import com.example.danabala.domain.model.Grade&#10;&#10;/**&#10; * Конверторы типов для Room базы данных&#10; */&#10;class Converters {&#10;    @TypeConverter&#10;    fun fromGrade(grade: Grade): String = grade.name&#10;    &#10;    @TypeConverter&#10;    fun toGrade(gradeName: String): Grade = Grade.valueOf(gradeName)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/PreferencesManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/PreferencesManager.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Менеджер для работы с SharedPreferences&#10; */&#10;@Singleton&#10;class PreferencesManager @Inject constructor(&#10;    @ApplicationContext context: Context&#10;) {&#10;    private val prefs: SharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;    &#10;    var currentUserId: String?&#10;        get() = prefs.getString(KEY_CURRENT_USER_ID, null)&#10;        set(value) = prefs.edit().putString(KEY_CURRENT_USER_ID, value).apply()&#10;    &#10;    var isFirstLaunch: Boolean&#10;        get() = prefs.getBoolean(KEY_FIRST_LAUNCH, true)&#10;        set(value) = prefs.edit().putBoolean(KEY_FIRST_LAUNCH, value).apply()&#10;    &#10;    var soundEnabled: Boolean&#10;        get() = prefs.getBoolean(KEY_SOUND_ENABLED, true)&#10;        set(value) = prefs.edit().putBoolean(KEY_SOUND_ENABLED, value).apply()&#10;    &#10;    companion object {&#10;        private const val PREFS_NAME = &quot;danabala_prefs&quot;&#10;        private const val KEY_CURRENT_USER_ID = &quot;current_user_id&quot;&#10;        private const val KEY_FIRST_LAUNCH = &quot;first_launch&quot;&#10;        private const val KEY_SOUND_ENABLED = &quot;sound_enabled&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/dao/ExerciseResultDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/dao/ExerciseResultDao.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local.dao&#10;&#10;import androidx.room.*&#10;import com.example.danabala.data.local.entity.ExerciseResultEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface ExerciseResultDao {&#10;    @Query(&quot;SELECT * FROM exercise_results WHERE userId = :userId ORDER BY completedAt DESC&quot;)&#10;    fun getUserResults(userId: String): Flow&lt;List&lt;ExerciseResultEntity&gt;&gt;&#10;    &#10;    @Query(&quot;SELECT * FROM exercise_results WHERE userId = :userId AND exerciseId = :exerciseId ORDER BY completedAt DESC&quot;)&#10;    fun getUserResultsForExercise(userId: String, exerciseId: String): Flow&lt;List&lt;ExerciseResultEntity&gt;&gt;&#10;    &#10;    @Insert&#10;    suspend fun insertResult(result: ExerciseResultEntity)&#10;    &#10;    @Query(&quot;DELETE FROM exercise_results WHERE userId = :userId&quot;)&#10;    suspend fun deleteUserResults(userId: String)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/dao/UserDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/dao/UserDao.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local.dao&#10;&#10;import androidx.room.*&#10;import com.example.danabala.data.local.entity.UserEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface UserDao {&#10;    @Query(&quot;SELECT * FROM users&quot;)&#10;    fun getAllUsers(): Flow&lt;List&lt;UserEntity&gt;&gt;&#10;    &#10;    @Query(&quot;SELECT * FROM users WHERE id = :id&quot;)&#10;    suspend fun getUserById(id: String): UserEntity?&#10;    &#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertUser(user: UserEntity)&#10;    &#10;    @Update&#10;    suspend fun updateUser(user: UserEntity)&#10;    &#10;    @Query(&quot;DELETE FROM users WHERE id = :id&quot;)&#10;    suspend fun deleteUser(id: String)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/entity/ExerciseResultEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/entity/ExerciseResultEntity.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;import com.example.danabala.domain.model.ExerciseResult&#10;&#10;@Entity(tableName = &quot;exercise_results&quot;)&#10;data class ExerciseResultEntity(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Long = 0,&#10;    val exerciseId: String,&#10;    val userId: String,&#10;    val score: Int,&#10;    val maxScore: Int,&#10;    val timeSpentSeconds: Int,&#10;    val completedAt: Long,&#10;    val mistakes: String // JSON строка для хранения списка ошибок&#10;)&#10;&#10;fun ExerciseResultEntity.toDomain(): ExerciseResult = ExerciseResult(&#10;    exerciseId = exerciseId,&#10;    userId = userId,&#10;    score = score,&#10;    maxScore = maxScore,&#10;    timeSpentSeconds = timeSpentSeconds,&#10;    completedAt = completedAt,&#10;    mistakes = mistakes.split(&quot;,&quot;).filter { it.isNotBlank() }&#10;)&#10;&#10;fun ExerciseResult.toEntity(): ExerciseResultEntity = ExerciseResultEntity(&#10;    exerciseId = exerciseId,&#10;    userId = userId,&#10;    score = score,&#10;    maxScore = maxScore,&#10;    timeSpentSeconds = timeSpentSeconds,&#10;    completedAt = completedAt,&#10;    mistakes = mistakes.joinToString(&quot;,&quot;)&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/entity/UserEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/local/entity/UserEntity.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;import com.example.danabala.domain.model.Grade&#10;import com.example.danabala.domain.model.User&#10;&#10;@Entity(tableName = &quot;users&quot;)&#10;data class UserEntity(&#10;    @PrimaryKey&#10;    val id: String,&#10;    val name: String,&#10;    val age: Int,&#10;    val grade: Grade,&#10;    val avatarUrl: String?,&#10;    val createdAt: Long&#10;)&#10;&#10;fun UserEntity.toDomain(): User = User(&#10;    id = id,&#10;    name = name,&#10;    age = age,&#10;    grade = grade,&#10;    avatarUrl = avatarUrl,&#10;    createdAt = createdAt&#10;)&#10;&#10;fun User.toEntity(): UserEntity = UserEntity(&#10;    id = id,&#10;    name = name,&#10;    age = age,&#10;    grade = grade,&#10;    avatarUrl = avatarUrl,&#10;    createdAt = createdAt&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/repository/ExerciseRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/repository/ExerciseRepositoryImpl.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.repository&#10;&#10;import com.example.danabala.data.local.AppDatabase&#10;import com.example.danabala.data.local.entity.toDomain&#10;import com.example.danabala.data.local.entity.toEntity&#10;import com.example.danabala.domain.model.Exercise&#10;import com.example.danabala.domain.model.ExerciseResult&#10;import com.example.danabala.domain.model.ExerciseType&#10;import com.example.danabala.domain.model.Grade&#10;import com.example.danabala.domain.repository.ExerciseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flowOf&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Реализация репозитория упражнений&#10; */&#10;@Singleton&#10;class ExerciseRepositoryImpl @Inject constructor(&#10;    private val database: AppDatabase&#10;) : ExerciseRepository {&#10;&#10;    private val exerciseResultDao = database.exerciseResultDao()&#10;&#10;    // Временно используем статические данные для упражнений&#10;    // В будущем можно добавить загрузку с сервера или из локальных файлов&#10;    private val staticExercises = listOf(&#10;        Exercise(&#10;            id = &quot;math_add_1&quot;,&#10;            title = &quot;Сложение до 10&quot;,&#10;            description = &quot;Учимся складывать числа от 1 до 10&quot;,&#10;            type = ExerciseType.MATH_ADDITION,&#10;            difficulty = com.example.danabala.domain.model.Difficulty.EASY,&#10;            targetGrades = listOf(Grade.PRESCHOOL_5_6, Grade.GRADE_1),&#10;            estimatedDurationMinutes = 10&#10;        ),&#10;        Exercise(&#10;            id = &quot;reading_letters_1&quot;,&#10;            title = &quot;Изучаем буквы А-Я&quot;,&#10;            description = &quot;Знакомимся с русским алфавитом&quot;,&#10;            type = ExerciseType.READING_LETTERS,&#10;            difficulty = com.example.danabala.domain.model.Difficulty.EASY,&#10;            targetGrades = listOf(Grade.PRESCHOOL_4_5, Grade.PRESCHOOL_5_6),&#10;            estimatedDurationMinutes = 15&#10;        )&#10;    )&#10;&#10;    override suspend fun getExercisesByType(type: ExerciseType): Flow&lt;List&lt;Exercise&gt;&gt; {&#10;        return flowOf(staticExercises.filter { it.type == type })&#10;    }&#10;&#10;    override suspend fun getExercisesByGrade(grade: Grade): Flow&lt;List&lt;Exercise&gt;&gt; {&#10;        return flowOf(staticExercises.filter { grade in it.targetGrades })&#10;    }&#10;&#10;    override suspend fun getExerciseById(id: String): Result&lt;Exercise?&gt; {&#10;        return try {&#10;            val exercise = staticExercises.find { it.id == id }&#10;            Result.success(exercise)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun saveExerciseResult(result: ExerciseResult): Result&lt;Unit&gt; {&#10;        return try {&#10;            exerciseResultDao.insertResult(result.toEntity())&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun getUserResults(userId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt; {&#10;        return exerciseResultDao.getUserResults(userId).map { entities -&gt;&#10;            entities.map { it.toDomain() }&#10;        }&#10;    }&#10;&#10;    override suspend fun getUserResultsForExercise(userId: String, exerciseId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt; {&#10;        return exerciseResultDao.getUserResultsForExercise(userId, exerciseId).map { entities -&gt;&#10;            entities.map { it.toDomain() }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/data/repository/UserRepositoryImpl.kt" />
              <option name="updatedContent" value="package com.example.danabala.data.repository&#10;&#10;import com.example.danabala.data.local.AppDatabase&#10;import com.example.danabala.data.local.PreferencesManager&#10;import com.example.danabala.data.local.entity.toDomain&#10;import com.example.danabala.data.local.entity.toEntity&#10;import com.example.danabala.domain.model.User&#10;import com.example.danabala.domain.repository.UserRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Реализация репозитория пользователей&#10; */&#10;@Singleton&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val database: AppDatabase,&#10;    private val preferencesManager: PreferencesManager&#10;) : UserRepository {&#10;&#10;    private val userDao = database.userDao()&#10;&#10;    override suspend fun createUser(user: User): Result&lt;Unit&gt; {&#10;        return try {&#10;            userDao.insertUser(user.toEntity())&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun getUserById(id: String): Result&lt;User?&gt; {&#10;        return try {&#10;            val user = userDao.getUserById(id)?.toDomain()&#10;            Result.success(user)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun getAllUsers(): Flow&lt;List&lt;User&gt;&gt; {&#10;        return userDao.getAllUsers().map { entities -&gt;&#10;            entities.map { it.toDomain() }&#10;        }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User): Result&lt;Unit&gt; {&#10;        return try {&#10;            userDao.updateUser(user.toEntity())&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun deleteUser(id: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            userDao.deleteUser(id)&#10;            // Если удаляемый пользователь был текущим, сбрасываем настройку&#10;            if (preferencesManager.currentUserId == id) {&#10;                preferencesManager.currentUserId = null&#10;            }&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun getCurrentUser(): Flow&lt;User?&gt; {&#10;        return userDao.getAllUsers().map { users -&gt;&#10;            val currentUserId = preferencesManager.currentUserId&#10;            users.find { it.id == currentUserId }?.toDomain()&#10;        }&#10;    }&#10;&#10;    override suspend fun setCurrentUser(userId: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            preferencesManager.currentUserId = userId&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/di/DatabaseModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/di/DatabaseModule.kt" />
              <option name="updatedContent" value="package com.example.danabala.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.example.danabala.data.local.AppDatabase&#10;import com.example.danabala.data.local.dao.ExerciseResultDao&#10;import com.example.danabala.data.local.dao.UserDao&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * DI модуль для базы данных&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object DatabaseModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {&#10;        return Room.databaseBuilder(&#10;            context,&#10;            AppDatabase::class.java,&#10;            AppDatabase.DATABASE_NAME&#10;        ).build()&#10;    }&#10;&#10;    @Provides&#10;    fun provideUserDao(database: AppDatabase): UserDao = database.userDao()&#10;&#10;    @Provides&#10;    fun provideExerciseResultDao(database: AppDatabase): ExerciseResultDao = database.exerciseResultDao()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/di/RepositoryModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/di/RepositoryModule.kt" />
              <option name="updatedContent" value="package com.example.danabala.di&#10;&#10;import com.example.danabala.data.repository.ExerciseRepositoryImpl&#10;import com.example.danabala.data.repository.UserRepositoryImpl&#10;import com.example.danabala.domain.repository.ExerciseRepository&#10;import com.example.danabala.domain.repository.UserRepository&#10;import dagger.Binds&#10;import dagger.Module&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * DI модуль для связывания интерфейсов репозиториев с их реализациями&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;abstract class RepositoryModule {&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindUserRepository(userRepositoryImpl: UserRepositoryImpl): UserRepository&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindExerciseRepository(exerciseRepositoryImpl: ExerciseRepositoryImpl): ExerciseRepository&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/model/Exercise.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/model/Exercise.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.model&#10;&#10;/**&#10; * Базовая модель тренировки&#10; */&#10;data class Exercise(&#10;    val id: String,&#10;    val title: String,&#10;    val description: String,&#10;    val type: ExerciseType,&#10;    val difficulty: Difficulty,&#10;    val targetGrades: List&lt;Grade&gt;,&#10;    val estimatedDurationMinutes: Int,&#10;    val iconResId: Int? = null&#10;)&#10;&#10;/**&#10; * Типы тренировок&#10; */&#10;enum class ExerciseType {&#10;    MATH_ADDITION,      // Сложение&#10;    MATH_SUBTRACTION,   // Вычитание&#10;    MATH_MULTIPLICATION,// Умножение&#10;    MATH_DIVISION,      // Деление&#10;    MATH_COUNTING,      // Счет&#10;    READING_LETTERS,    // Изучение букв&#10;    READING_SYLLABLES,  // Слоги&#10;    READING_WORDS,      // Слова&#10;    READING_SENTENCES,  // Предложения&#10;    READING_COMPREHENSION // Понимание прочитанного&#10;}&#10;&#10;/**&#10; * Уровень сложности&#10; */&#10;enum class Difficulty {&#10;    EASY,&#10;    MEDIUM,&#10;    HARD&#10;}&#10;&#10;/**&#10; * Результат выполнения тренировки&#10; */&#10;data class ExerciseResult(&#10;    val exerciseId: String,&#10;    val userId: String,&#10;    val score: Int,&#10;    val maxScore: Int,&#10;    val timeSpentSeconds: Int,&#10;    val completedAt: Long = System.currentTimeMillis(),&#10;    val mistakes: List&lt;String&gt; = emptyList()&#10;) {&#10;    val percentage: Float&#10;        get() = if (maxScore &gt; 0) (score.toFloat() / maxScore) * 100 else 0f&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/model/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/model/User.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.model&#10;&#10;/**&#10; * Базовая модель пользователя (ребенка)&#10; */&#10;data class User(&#10;    val id: String,&#10;    val name: String,&#10;    val age: Int,&#10;    val grade: Grade,&#10;    val avatarUrl: String? = null,&#10;    val createdAt: Long = System.currentTimeMillis()&#10;)&#10;&#10;/**&#10; * Класс обучения (дошкольник/школьник)&#10; */&#10;enum class Grade {&#10;    PRESCHOOL_3_4,    // 3-4 года&#10;    PRESCHOOL_4_5,    // 4-5 лет&#10;    PRESCHOOL_5_6,    // 5-6 лет&#10;    GRADE_1,          // 1 класс&#10;    GRADE_2,          // 2 класс&#10;    GRADE_3,          // 3 класс&#10;    GRADE_4           // 4 класс&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/repository/ExerciseRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/repository/ExerciseRepository.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.repository&#10;&#10;import com.example.danabala.domain.model.Exercise&#10;import com.example.danabala.domain.model.ExerciseResult&#10;import com.example.danabala.domain.model.ExerciseType&#10;import com.example.danabala.domain.model.Grade&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Репозиторий для работы с упражнениями и результатами&#10; */&#10;interface ExerciseRepository {&#10;    suspend fun getExercisesByType(type: ExerciseType): Flow&lt;List&lt;Exercise&gt;&gt;&#10;    suspend fun getExercisesByGrade(grade: Grade): Flow&lt;List&lt;Exercise&gt;&gt;&#10;    suspend fun getExerciseById(id: String): Result&lt;Exercise?&gt;&#10;    suspend fun saveExerciseResult(result: ExerciseResult): Result&lt;Unit&gt;&#10;    suspend fun getUserResults(userId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt;&#10;    suspend fun getUserResultsForExercise(userId: String, exerciseId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/repository/UserRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/repository/UserRepository.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.repository&#10;&#10;import com.example.danabala.domain.model.User&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Репозиторий для работы с пользователями&#10; */&#10;interface UserRepository {&#10;    suspend fun createUser(user: User): Result&lt;Unit&gt;&#10;    suspend fun getUserById(id: String): Result&lt;User?&gt;&#10;    suspend fun getAllUsers(): Flow&lt;List&lt;User&gt;&gt;&#10;    suspend fun updateUser(user: User): Result&lt;Unit&gt;&#10;    suspend fun deleteUser(id: String): Result&lt;Unit&gt;&#10;    suspend fun getCurrentUser(): Flow&lt;User?&gt;&#10;    suspend fun setCurrentUser(userId: String): Result&lt;Unit&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/usecase/ExerciseUseCases.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/usecase/ExerciseUseCases.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.usecase&#10;&#10;import com.example.danabala.domain.model.Exercise&#10;import com.example.danabala.domain.model.ExerciseResult&#10;import com.example.danabala.domain.model.ExerciseType&#10;import com.example.danabala.domain.model.Grade&#10;import com.example.danabala.domain.repository.ExerciseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use Cases для работы с упражнениями&#10; */&#10;class GetExercisesByTypeUseCase @Inject constructor(&#10;    private val exerciseRepository: ExerciseRepository&#10;) {&#10;    operator fun invoke(type: ExerciseType): Flow&lt;List&lt;Exercise&gt;&gt; = &#10;        exerciseRepository.getExercisesByType(type)&#10;}&#10;&#10;class GetExercisesByGradeUseCase @Inject constructor(&#10;    private val exerciseRepository: ExerciseRepository&#10;) {&#10;    operator fun invoke(grade: Grade): Flow&lt;List&lt;Exercise&gt;&gt; = &#10;        exerciseRepository.getExercisesByGrade(grade)&#10;}&#10;&#10;class SaveExerciseResultUseCase @Inject constructor(&#10;    private val exerciseRepository: ExerciseRepository&#10;) {&#10;    suspend operator fun invoke(result: ExerciseResult): Result&lt;Unit&gt; = &#10;        exerciseRepository.saveExerciseResult(result)&#10;}&#10;&#10;class GetUserProgressUseCase @Inject constructor(&#10;    private val exerciseRepository: ExerciseRepository&#10;) {&#10;    operator fun invoke(userId: String): Flow&lt;List&lt;ExerciseResult&gt;&gt; = &#10;        exerciseRepository.getUserResults(userId)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/usecase/UserUseCases.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/danabala/domain/usecase/UserUseCases.kt" />
              <option name="updatedContent" value="package com.example.danabala.domain.usecase&#10;&#10;import com.example.danabala.domain.model.User&#10;import com.example.danabala.domain.repository.UserRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use Cases для работы с пользователями&#10; */&#10;class GetCurrentUserUseCase @Inject constructor(&#10;    private val userRepository: UserRepository&#10;) {&#10;    operator fun invoke(): Flow&lt;User?&gt; = userRepository.getCurrentUser()&#10;}&#10;&#10;class CreateUserUseCase @Inject constructor(&#10;    private val userRepository: UserRepository&#10;) {&#10;    suspend operator fun invoke(user: User): Result&lt;Unit&gt; = userRepository.createUser(user)&#10;}&#10;&#10;class GetAllUsersUseCase @Inject constructor(&#10;    private val userRepository: UserRepository&#10;) {&#10;    operator fun invoke(): Flow&lt;List&lt;User&gt;&gt; = userRepository.getAllUsers()&#10;}&#10;&#10;class SetCurrentUserUseCase @Inject constructor(&#10;    private val userRepository: UserRepository&#10;) {&#10;    suspend operator fun invoke(userId: String): Result&lt;Unit&gt; = userRepository.setCurrentUser(userId)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabala/MathExercisesActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabala/MathExercisesActivity.kt" />
              <option name="originalContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;&#10;class MathExercisesActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_math_exercises)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        setupExerciseCards()&#10;    }&#10;&#10;    private fun setupExerciseCards() {&#10;        findViewById&lt;CardView&gt;(R.id.cardNumberIntroduction).setOnClickListener {&#10;            val intent = Intent(this, NumberIntroductionActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardNumbers).setOnClickListener {&#10;            val intent = Intent(this, NumberRecognitionActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardCounting).setOnClickListener {&#10;            val intent = Intent(this, CountingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardObjectCounting).setOnClickListener {&#10;            val intent = Intent(this, ObjectCountingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardMatching).setOnClickListener {&#10;            val intent = Intent(this, MatchingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardAudioMatching).setOnClickListener {&#10;            val intent = Intent(this, AudioMatchingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardAscendingSequence).setOnClickListener {&#10;            val intent = Intent(this, AscendingSequenceActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardDescendingSequence).setOnClickListener {&#10;            val intent = Intent(this, DescendingSequenceActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;&#10;class MathExercisesActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_math_exercises)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        setupExerciseCards()&#10;    }&#10;&#10;    private fun setupExerciseCards() {&#10;        findViewById&lt;CardView&gt;(R.id.cardNumberIntroduction).setOnClickListener {&#10;            val intent = Intent(this, NumberIntroductionActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardNumbers).setOnClickListener {&#10;            val intent = Intent(this, NumberRecognitionActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardCounting).setOnClickListener {&#10;            val intent = Intent(this, CountingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardObjectCounting).setOnClickListener {&#10;            val intent = Intent(this, ObjectCountingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardMatching).setOnClickListener {&#10;            val intent = Intent(this, MatchingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardAudioMatching).setOnClickListener {&#10;            val intent = Intent(this, AudioMatchingActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardAscendingSequence).setOnClickListener {&#10;            val intent = Intent(this, AscendingSequenceActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardDescendingSequence).setOnClickListener {&#10;            val intent = Intent(this, DescendingSequenceActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.cardNumberComparison).setOnClickListener {&#10;            val intent = Intent(this, NumberComparisonActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabala/NumberComparisonActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabala/NumberComparisonActivity.kt" />
              <option name="originalContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.ClipData&#10;import android.content.Intent&#10;import android.content.pm.ActivityInfo&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.view.DragEvent&#10;import android.view.MotionEvent&#10;import android.view.View&#10;import android.widget.LinearLayout&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Button&#10;import android.widget.ImageButton&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class NumberComparisonActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var tts: TextToSpeech? = null&#10;    private var currentQuestion = 0&#10;    private var score = 0&#10;    private var totalCorrectAnswers = 0&#10;    private val totalQuestions = 20&#10;    private var hasTriedCurrentQuestion = false&#10;&#10;    // UI элементы&#10;    private lateinit var progressBar: ProgressBar&#10;    private lateinit var questionText: TextView&#10;    private lateinit var leftNumberDisplay: TextView&#10;    private lateinit var rightNumberDisplay: TextView&#10;    private lateinit var leftObjectsDisplay: TextView&#10;    private lateinit var rightObjectsDisplay: TextView&#10;    private lateinit var comparisonDropZone: TextView&#10;    private lateinit var checkButton: Button&#10;    private lateinit var nextButton: Button&#10;    private lateinit var hintText: TextView&#10;    private lateinit var comparisonSymbolsContainer: LinearLayout&#10;&#10;    // Логика игры&#10;    private var leftNumber = 0&#10;    private var rightNumber = 0&#10;    private var correctComparison = &quot;&quot;&#10;    private var currentObjectType = &quot;&quot;&#10;    private var selectedSymbol = &quot;&quot;&#10;&#10;    // Варианты похвалы за правильные ответы&#10;    private val correctPhrases = listOf(&#10;        &quot;Молодец!&quot;, &quot;Так держать!&quot;, &quot;Превосходно!&quot;, &quot;Отлично!&quot;,&#10;        &quot;Замечательно!&quot;, &quot;Ты супер!&quot;, &quot;Великолепно!&quot;, &quot;Браво!&quot;,&#10;        &quot;Умница!&quot;, &quot;Здорово!&quot;&#10;    )&#10;&#10;    // Эмодзи для предметов&#10;    private val objectEmojis = arrayOf(&#10;        &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,&#10;        &quot;⚽&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,&#10;        &quot;&quot;, &quot;⭐&quot;, &quot;✨&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Принудительно устанавливаем альбомную ориентацию&#10;        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE&#10;&#10;        setContentView(R.layout.activity_number_comparison)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        tts = TextToSpeech(this, this)&#10;        initializeViews()&#10;        setupDragAndDrop()&#10;        generateNewQuestion()&#10;    }&#10;&#10;    private fun initializeViews() {&#10;        progressBar = findViewById(R.id.progressBar)&#10;        questionText = findViewById(R.id.questionText)&#10;        leftNumberDisplay = findViewById(R.id.leftNumberDisplay)&#10;        rightNumberDisplay = findViewById(R.id.rightNumberDisplay)&#10;        leftObjectsDisplay = findViewById(R.id.leftObjectsDisplay)&#10;        rightObjectsDisplay = findViewById(R.id.rightObjectsDisplay)&#10;        comparisonDropZone = findViewById(R.id.comparisonDropZone)&#10;        checkButton = findViewById(R.id.checkButton)&#10;        nextButton = findViewById(R.id.nextButton)&#10;        hintText = findViewById(R.id.hintText)&#10;        comparisonSymbolsContainer = findViewById(R.id.comparisonSymbolsContainer)&#10;&#10;        checkButton.setOnClickListener { checkAnswer() }&#10;        nextButton.setOnClickListener { nextQuestion() }&#10;&#10;        // Добавляем обработчик для кнопки &quot;Назад&quot;&#10;        findViewById&lt;ImageButton&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;&#10;        // Изначально скрываем кнопку &quot;Далее&quot;&#10;        nextButton.visibility = Button.GONE&#10;&#10;        // Создаем символы сравнения&#10;        createComparisonSymbols()&#10;    }&#10;&#10;    private fun createComparisonSymbols() {&#10;        val symbols = arrayOf(&quot;&lt;&quot;, &quot;&gt;&quot;, &quot;=&quot;)&#10;&#10;        symbols.forEach { symbol -&gt;&#10;            val symbolView = TextView(this).apply {&#10;                text = symbol&#10;                textSize = 32f&#10;                setTextColor(ContextCompat.getColor(this@NumberComparisonActivity, android.R.color.black))&#10;                setBackgroundResource(R.drawable.draggable_number_card)&#10;                gravity = android.view.Gravity.CENTER&#10;                setPadding(4, 4, 4, 4)&#10;                includeFontPadding = false&#10;&#10;                val layoutParams = LinearLayout.LayoutParams(70, 70).apply {&#10;                    setMargins(8, 4, 8, 4)&#10;                    gravity = android.view.Gravity.CENTER&#10;                }&#10;                this.layoutParams = layoutParams&#10;&#10;                // Настройка drag functionality&#10;                setOnTouchListener { view, event -&gt;&#10;                    if (event.action == MotionEvent.ACTION_DOWN) {&#10;                        val clipData = ClipData.newPlainText(&quot;symbol&quot;, symbol)&#10;                        val shadowBuilder = View.DragShadowBuilder(view)&#10;                        view.startDragAndDrop(clipData, shadowBuilder, view, 0)&#10;                        true&#10;                    } else {&#10;                        false&#10;                    }&#10;                }&#10;            }&#10;            comparisonSymbolsContainer.addView(symbolView)&#10;        }&#10;    }&#10;&#10;    private fun setupDragAndDrop() {&#10;        // Настройка drop zone для символов сравнения&#10;        comparisonDropZone.setOnDragListener { view, event -&gt;&#10;            when (event.action) {&#10;                DragEvent.ACTION_DRAG_STARTED -&gt; true&#10;                DragEvent.ACTION_DRAG_ENTERED -&gt; {&#10;                    view.setBackgroundResource(R.drawable.number_drop_zone_highlight)&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DRAG_EXITED -&gt; {&#10;                    resetDropZoneBackground()&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DROP -&gt; {&#10;                    val symbol = event.clipData.getItemAt(0).text.toString()&#10;                    handleSymbolDrop(symbol)&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DRAG_ENDED -&gt; {&#10;                    resetDropZoneBackground()&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;&#10;        // Клик по drop zone для возврата символа&#10;        comparisonDropZone.setOnClickListener {&#10;            returnSymbolToContainer()&#10;        }&#10;&#10;        // Настройка контейнера символов как drop zone для возврата&#10;        comparisonSymbolsContainer.setOnDragListener { view, event -&gt;&#10;            when (event.action) {&#10;                DragEvent.ACTION_DRAG_STARTED -&gt; true&#10;                DragEvent.ACTION_DRAG_ENTERED -&gt; {&#10;                    view.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_blue_light))&#10;                    view.alpha = 0.3f&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DRAG_EXITED -&gt; {&#10;                    view.setBackgroundColor(android.graphics.Color.TRANSPARENT)&#10;                    view.alpha = 1.0f&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DROP -&gt; {&#10;                    view.setBackgroundColor(android.graphics.Color.TRANSPARENT)&#10;                    view.alpha = 1.0f&#10;                    returnSymbolToContainer()&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DRAG_ENDED -&gt; {&#10;                    view.setBackgroundColor(android.graphics.Color.TRANSPARENT)&#10;                    view.alpha = 1.0f&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleSymbolDrop(symbol: String) {&#10;        // Если уже есть символ, возвращаем его&#10;        if (selectedSymbol.isNotEmpty()) {&#10;            returnSymbolToContainer()&#10;        }&#10;&#10;        // Устанавливаем новый символ&#10;        selectedSymbol = symbol&#10;        comparisonDropZone.text = symbol&#10;        comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone_filled)&#10;&#10;        // Удаляем символ из контейнера&#10;        removeSymbolFromContainer(symbol)&#10;&#10;        // Активируем кнопку проверки&#10;        checkButton.isEnabled = true&#10;&#10;        // Озвучиваем вопрос с добавленным символом&#10;        speakComparisonQuestion(symbol)&#10;    }&#10;&#10;    private fun returnSymbolToContainer() {&#10;        if (selectedSymbol.isNotEmpty()) {&#10;            // Очищаем drop zone&#10;            comparisonDropZone.text = &quot;&quot;&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone)&#10;&#10;            // Возвращаем символ в контейнер&#10;            addSymbolToContainer(selectedSymbol)&#10;&#10;            selectedSymbol = &quot;&quot;&#10;            checkButton.isEnabled = false&#10;        }&#10;    }&#10;&#10;    private fun removeSymbolFromContainer(symbol: String) {&#10;        for (i in 0 until comparisonSymbolsContainer.childCount) {&#10;            val child = comparisonSymbolsContainer.getChildAt(i) as TextView&#10;            if (child.text.toString() == symbol) {&#10;                comparisonSymbolsContainer.removeView(child)&#10;                break&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun addSymbolToContainer(symbol: String) {&#10;        val symbolView = TextView(this).apply {&#10;            text = symbol&#10;            textSize = 32f&#10;            setTextColor(ContextCompat.getColor(this@NumberComparisonActivity, android.R.color.black))&#10;            setBackgroundResource(R.drawable.draggable_number_card)&#10;            gravity = android.view.Gravity.CENTER&#10;            setPadding(4, 4, 4, 4)&#10;            includeFontPadding = false&#10;&#10;            val layoutParams = LinearLayout.LayoutParams(70, 70).apply {&#10;                setMargins(8, 4, 8, 4)&#10;                gravity = android.view.Gravity.CENTER&#10;            }&#10;            this.layoutParams = layoutParams&#10;&#10;            setOnTouchListener { view, event -&gt;&#10;                if (event.action == MotionEvent.ACTION_DOWN) {&#10;                    val clipData = ClipData.newPlainText(&quot;symbol&quot;, symbol)&#10;                    val shadowBuilder = View.DragShadowBuilder(view)&#10;                    view.startDragAndDrop(clipData, shadowBuilder, view, 0)&#10;                    true&#10;                } else {&#10;                    false&#10;                }&#10;            }&#10;        }&#10;&#10;        // Вставляем символ в правильном порядке&#10;        val symbols = arrayOf(&quot;&lt;&quot;, &quot;&gt;&quot;, &quot;=&quot;)&#10;        val position = symbols.indexOf(symbol)&#10;        if (position != -1 &amp;&amp; position &lt;= comparisonSymbolsContainer.childCount) {&#10;            comparisonSymbolsContainer.addView(symbolView, position)&#10;        } else {&#10;            comparisonSymbolsContainer.addView(symbolView)&#10;        }&#10;    }&#10;&#10;    private fun resetDropZoneBackground() {&#10;        if (comparisonDropZone.text.isEmpty()) {&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone)&#10;        } else {&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone_filled)&#10;        }&#10;    }&#10;&#10;    private fun generateNewQuestion() {&#10;        hasTriedCurrentQuestion = false&#10;        checkButton.isEnabled = false&#10;        nextButton.visibility = Button.GONE&#10;&#10;        // Очищаем предыдущее состояние&#10;        returnSymbolToContainer()&#10;&#10;        // Генерируем два разных числа от 0 до 9&#10;        do {&#10;            leftNumber = Random.nextInt(10)&#10;            rightNumber = Random.nextInt(10)&#10;        } while (leftNumber == rightNumber) // Убеждаемся, что числа разные для начала&#10;&#10;        // В 30% случаев делаем числа равными&#10;        if (Random.nextFloat() &lt; 0.3f) {&#10;            rightNumber = leftNumber&#10;        }&#10;&#10;        // Выбираем случайный объект&#10;        currentObjectType = objectEmojis[Random.nextInt(objectEmojis.size)]&#10;&#10;        // Определяем правильный символ сравнения&#10;        correctComparison = when {&#10;            leftNumber &lt; rightNumber -&gt; &quot;&lt;&quot;&#10;            leftNumber &gt; rightNumber -&gt; &quot;&gt;&quot;&#10;            else -&gt; &quot;=&quot;&#10;        }&#10;&#10;        // Обновляем отображение&#10;        leftNumberDisplay.text = leftNumber.toString()&#10;        rightNumberDisplay.text = rightNumber.toString()&#10;&#10;        leftObjectsDisplay.text = generateObjects(leftNumber)&#10;        rightObjectsDisplay.text = generateObjects(rightNumber)&#10;&#10;        updateProgress()&#10;        updateQuestionText()&#10;        speakQuestion()&#10;    }&#10;&#10;    private fun generateObjects(count: Int): String {&#10;        if (count == 0) return &quot;&quot;&#10;&#10;        // Отображаем все предметы в одну строку&#10;        return currentObjectType.repeat(count)&#10;    }&#10;&#10;    private fun updateQuestionText() {&#10;        questionText.text = &quot;Сравни числа&quot;&#10;        hintText.text = &quot;Перетащи символ сравнения в центр&quot;&#10;    }&#10;&#10;    private fun updateProgress() {&#10;        progressBar.progress = ((currentQuestion.toFloat() / totalQuestions) * 100).toInt()&#10;    }&#10;&#10;    private fun checkAnswer() {&#10;        if (!hasTriedCurrentQuestion) {&#10;            hasTriedCurrentQuestion = true&#10;        }&#10;&#10;        if (selectedSymbol == correctComparison) {&#10;            // Правильный ответ&#10;            score += 100&#10;            totalCorrectAnswers++&#10;            showCorrectFeedback()&#10;            checkButton.isEnabled = false&#10;            nextButton.visibility = Button.VISIBLE&#10;&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_input_correct)&#10;            animateCorrectAnswer(comparisonDropZone)&#10;        } else {&#10;            // Неправильный ответ&#10;            showIncorrectFeedback()&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_input_incorrect)&#10;            animateIncorrectAnswer(comparisonDropZone)&#10;        }&#10;    }&#10;&#10;    private fun showCorrectFeedback() {&#10;        val phrase = correctPhrases.random()&#10;        hintText.text = phrase&#10;        hintText.setTextColor(ContextCompat.getColor(this, android.R.color.holo_green_dark))&#10;        speakText(phrase)&#10;    }&#10;&#10;    private fun showIncorrectFeedback() {&#10;        hintText.text = &quot;Попробуй еще раз! Сравни количество предметов.&quot;&#10;        hintText.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;        speakText(&quot;Попробуй еще раз&quot;)&#10;    }&#10;&#10;    private fun nextQuestion() {&#10;        currentQuestion++&#10;&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            finishGame()&#10;        } else {&#10;            generateNewQuestion()&#10;        }&#10;    }&#10;&#10;    private fun finishGame() {&#10;        val intent = Intent(this, NumberComparisonResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, score)&#10;        intent.putExtra(&quot;totalCorrectAnswers&quot;, totalCorrectAnswers)&#10;        intent.putExtra(&quot;totalQuestions&quot;, totalQuestions)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun animateCorrectAnswer(view: TextView) {&#10;        val scaleX = ObjectAnimator.ofFloat(view, &quot;scaleX&quot;, 1f, 1.2f, 1f)&#10;        val scaleY = ObjectAnimator.ofFloat(view, &quot;scaleY&quot;, 1f, 1.2f, 1f)&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.playTogether(scaleX, scaleY)&#10;        animatorSet.duration = 300&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateIncorrectAnswer(view: TextView) {&#10;        val shake = ObjectAnimator.ofFloat(view, &quot;translationX&quot;, 0f, -10f, 10f, -5f, 5f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun speakQuestion() {&#10;        val leftDescription = if (leftNumber == 0) &quot;ноль&quot; else &quot;$leftNumber&quot;&#10;        val rightDescription = if (rightNumber == 0) &quot;ноль&quot; else &quot;$rightNumber&quot;&#10;        speakText(&quot;Сравни числа $leftDescription и $rightDescription&quot;)&#10;    }&#10;&#10;    private fun speakComparisonQuestion(symbol: String) {&#10;        val leftDescription = getNumberDescription(leftNumber)&#10;        val rightDescription = getNumberDescription(rightNumber)&#10;&#10;        val symbolDescription = when (symbol) {&#10;            &quot;&lt;&quot; -&gt; &quot;меньше&quot;&#10;            &quot;&gt;&quot; -&gt; &quot;больше&quot;&#10;            &quot;=&quot; -&gt; &quot;равно&quot;&#10;            else -&gt; symbol&#10;        }&#10;&#10;        val questionText = &quot;$leftDescription $symbolDescription $rightDescription? Ты уверен? Проверь!&quot;&#10;        speakText(questionText)&#10;    }&#10;&#10;    private fun getNumberDescription(number: Int): String {&#10;        return when (number) {&#10;            0 -&gt; &quot;ноль&quot;&#10;            1 -&gt; &quot;один&quot;&#10;            2 -&gt; &quot;два&quot;&#10;            3 -&gt; &quot;три&quot;&#10;            4 -&gt; &quot;четыре&quot;&#10;            5 -&gt; &quot;пять&quot;&#10;            6 -&gt; &quot;шесть&quot;&#10;            7 -&gt; &quot;семь&quot;&#10;            8 -&gt; &quot;восемь&quot;&#10;            9 -&gt; &quot;девять&quot;&#10;            else -&gt; number.toString()&#10;        }&#10;    }&#10;&#10;    private fun speakText(text: String) {&#10;        tts?.speak(text, TextToSpeech.QUEUE_FLUSH, null, null)&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts!!.setLanguage(Locale(&quot;ru&quot;, &quot;RU&quot;))&#10;            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {&#10;                tts!!.setLanguage(Locale.getDefault())&#10;            }&#10;            speakQuestion()&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.animation.AnimatorSet&#10;import android.animation.ObjectAnimator&#10;import android.content.ClipData&#10;import android.content.Intent&#10;import android.content.pm.ActivityInfo&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.view.DragEvent&#10;import android.view.MotionEvent&#10;import android.view.View&#10;import android.widget.LinearLayout&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Button&#10;import android.widget.ImageButton&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class NumberComparisonActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var tts: TextToSpeech? = null&#10;    private var currentQuestion = 0&#10;    private var score = 0&#10;    private var totalCorrectAnswers = 0&#10;    private val totalQuestions = 20&#10;    private var hasTriedCurrentQuestion = false&#10;&#10;    // UI элементы&#10;    private lateinit var progressBar: ProgressBar&#10;    private lateinit var questionText: TextView&#10;    private lateinit var leftNumberDisplay: TextView&#10;    private lateinit var rightNumberDisplay: TextView&#10;    private lateinit var leftObjectsDisplay: TextView&#10;    private lateinit var rightObjectsDisplay: TextView&#10;    private lateinit var comparisonDropZone: TextView&#10;    private lateinit var checkButton: Button&#10;    private lateinit var nextButton: Button&#10;    private lateinit var hintText: TextView&#10;    private lateinit var comparisonSymbolsContainer: LinearLayout&#10;&#10;    // Логика игры&#10;    private var leftNumber = 0&#10;    private var rightNumber = 0&#10;    private var correctComparison = &quot;&quot;&#10;    private var currentObjectType = &quot;&quot;&#10;    private var selectedSymbol = &quot;&quot;&#10;&#10;    // Варианты похвалы за правильные ответы&#10;    private val correctPhrases = listOf(&#10;        &quot;Молодец!&quot;, &quot;Так держать!&quot;, &quot;Превосходно!&quot;, &quot;Отлично!&quot;,&#10;        &quot;Замечательно!&quot;, &quot;Ты супер!&quot;, &quot;Великолепно!&quot;, &quot;Браво!&quot;,&#10;        &quot;Умница!&quot;, &quot;Здорово!&quot;&#10;    )&#10;&#10;    // Эмодзи для предметов&#10;    private val objectEmojis = arrayOf(&#10;        &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,&#10;        &quot;⚽&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,&#10;        &quot;&quot;, &quot;⭐&quot;, &quot;✨&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;&#10;    )&#10;&#10;    // Варианты побуждающих фраз для озвучки&#10;    private val encouragementPhrases = listOf(&#10;        &quot;Ты уверен? Проверь!&quot;,&#10;        &quot;Правильно ли это? Подумай еще раз!&quot;,&#10;        &quot;Точно так? Давай проверим!&quot;,&#10;        &quot;Уверен в ответе? Нажми проверить!&quot;,&#10;        &quot;Все верно? Посмотри внимательно!&quot;,&#10;        &quot;Правильный выбор? Давай узнаем!&quot;,&#10;        &quot;Так ли это? Проверяем вместе!&quot;,&#10;        &quot;Согласен с ответом? Жми проверить!&quot;,&#10;        &quot;Думаешь, это правильно? Попробуем!&quot;,&#10;        &quot;Готов проверить? Нажимай кнопку!&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Принудительно устанавливаем альбомную ориентацию&#10;        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE&#10;&#10;        setContentView(R.layout.activity_number_comparison)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        tts = TextToSpeech(this, this)&#10;        initializeViews()&#10;        setupDragAndDrop()&#10;        generateNewQuestion()&#10;    }&#10;&#10;    private fun initializeViews() {&#10;        progressBar = findViewById(R.id.progressBar)&#10;        questionText = findViewById(R.id.questionText)&#10;        leftNumberDisplay = findViewById(R.id.leftNumberDisplay)&#10;        rightNumberDisplay = findViewById(R.id.rightNumberDisplay)&#10;        leftObjectsDisplay = findViewById(R.id.leftObjectsDisplay)&#10;        rightObjectsDisplay = findViewById(R.id.rightObjectsDisplay)&#10;        comparisonDropZone = findViewById(R.id.comparisonDropZone)&#10;        checkButton = findViewById(R.id.checkButton)&#10;        nextButton = findViewById(R.id.nextButton)&#10;        hintText = findViewById(R.id.hintText)&#10;        comparisonSymbolsContainer = findViewById(R.id.comparisonSymbolsContainer)&#10;&#10;        checkButton.setOnClickListener { checkAnswer() }&#10;        nextButton.setOnClickListener { nextQuestion() }&#10;&#10;        // Добавляем обработчик для кнопки &quot;Назад&quot;&#10;        findViewById&lt;ImageButton&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;&#10;        // Изначально скрываем кнопку &quot;Далее&quot;&#10;        nextButton.visibility = Button.GONE&#10;&#10;        // Создаем символы сравнения&#10;        createComparisonSymbols()&#10;    }&#10;&#10;    private fun createComparisonSymbols() {&#10;        val symbols = arrayOf(&quot;&lt;&quot;, &quot;&gt;&quot;, &quot;=&quot;)&#10;&#10;        symbols.forEach { symbol -&gt;&#10;            val symbolView = TextView(this).apply {&#10;                text = symbol&#10;                textSize = 28f  // Уменьшили с 32f до 28f&#10;                setTextColor(ContextCompat.getColor(this@NumberComparisonActivity, android.R.color.black))&#10;                setBackgroundResource(R.drawable.draggable_number_card)&#10;                gravity = android.view.Gravity.CENTER&#10;                setPadding(4, 4, 4, 4)&#10;                includeFontPadding = false&#10;&#10;                val layoutParams = LinearLayout.LayoutParams(70, 70).apply {&#10;                    setMargins(8, 4, 8, 4)&#10;                    gravity = android.view.Gravity.CENTER&#10;                }&#10;                this.layoutParams = layoutParams&#10;&#10;                // Настройка drag functionality&#10;                setOnTouchListener { view, event -&gt;&#10;                    if (event.action == MotionEvent.ACTION_DOWN) {&#10;                        val clipData = ClipData.newPlainText(&quot;symbol&quot;, symbol)&#10;                        val shadowBuilder = View.DragShadowBuilder(view)&#10;                        view.startDragAndDrop(clipData, shadowBuilder, view, 0)&#10;                        true&#10;                    } else {&#10;                        false&#10;                    }&#10;                }&#10;            }&#10;            comparisonSymbolsContainer.addView(symbolView)&#10;        }&#10;    }&#10;&#10;    private fun setupDragAndDrop() {&#10;        // Настройка drop zone для символов сравнения&#10;        comparisonDropZone.setOnDragListener { view, event -&gt;&#10;            when (event.action) {&#10;                DragEvent.ACTION_DRAG_STARTED -&gt; true&#10;                DragEvent.ACTION_DRAG_ENTERED -&gt; {&#10;                    view.setBackgroundResource(R.drawable.number_drop_zone_highlight)&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DRAG_EXITED -&gt; {&#10;                    resetDropZoneBackground()&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DROP -&gt; {&#10;                    val symbol = event.clipData.getItemAt(0).text.toString()&#10;                    handleSymbolDrop(symbol)&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DRAG_ENDED -&gt; {&#10;                    resetDropZoneBackground()&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;&#10;        // Клик по drop zone для возврата символа&#10;        comparisonDropZone.setOnClickListener {&#10;            returnSymbolToContainer()&#10;        }&#10;&#10;        // Настройка контейнера символов как drop zone для возврата&#10;        comparisonSymbolsContainer.setOnDragListener { view, event -&gt;&#10;            when (event.action) {&#10;                DragEvent.ACTION_DRAG_STARTED -&gt; true&#10;                DragEvent.ACTION_DRAG_ENTERED -&gt; {&#10;                    view.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_blue_light))&#10;                    view.alpha = 0.3f&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DRAG_EXITED -&gt; {&#10;                    view.setBackgroundColor(android.graphics.Color.TRANSPARENT)&#10;                    view.alpha = 1.0f&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DROP -&gt; {&#10;                    view.setBackgroundColor(android.graphics.Color.TRANSPARENT)&#10;                    view.alpha = 1.0f&#10;                    returnSymbolToContainer()&#10;                    true&#10;                }&#10;                DragEvent.ACTION_DRAG_ENDED -&gt; {&#10;                    view.setBackgroundColor(android.graphics.Color.TRANSPARENT)&#10;                    view.alpha = 1.0f&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleSymbolDrop(symbol: String) {&#10;        // Если уже есть символ, возвращаем его&#10;        if (selectedSymbol.isNotEmpty()) {&#10;            returnSymbolToContainer()&#10;        }&#10;&#10;        // Устанавливаем новый символ&#10;        selectedSymbol = symbol&#10;        comparisonDropZone.text = symbol&#10;        comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone_filled)&#10;&#10;        // Удаляем символ из контейнера&#10;        removeSymbolFromContainer(symbol)&#10;&#10;        // Активируем кнопку проверки&#10;        checkButton.isEnabled = true&#10;&#10;        // Озвучиваем вопрос с добавленным символом&#10;        speakComparisonQuestion(symbol)&#10;    }&#10;&#10;    private fun returnSymbolToContainer() {&#10;        if (selectedSymbol.isNotEmpty()) {&#10;            // Очищаем drop zone&#10;            comparisonDropZone.text = &quot;&quot;&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone)&#10;&#10;            // Возвращаем символ в контейнер&#10;            addSymbolToContainer(selectedSymbol)&#10;&#10;            selectedSymbol = &quot;&quot;&#10;            checkButton.isEnabled = false&#10;        }&#10;    }&#10;&#10;    private fun removeSymbolFromContainer(symbol: String) {&#10;        for (i in 0 until comparisonSymbolsContainer.childCount) {&#10;            val child = comparisonSymbolsContainer.getChildAt(i) as TextView&#10;            if (child.text.toString() == symbol) {&#10;                comparisonSymbolsContainer.removeView(child)&#10;                break&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun addSymbolToContainer(symbol: String) {&#10;        val symbolView = TextView(this).apply {&#10;            text = symbol&#10;            textSize = 28f  // Изменили с 32f на 28f для соответствия&#10;            setTextColor(ContextCompat.getColor(this@NumberComparisonActivity, android.R.color.black))&#10;            setBackgroundResource(R.drawable.draggable_number_card)&#10;            gravity = android.view.Gravity.CENTER&#10;            setPadding(4, 4, 4, 4)&#10;            includeFontPadding = false&#10;&#10;            val layoutParams = LinearLayout.LayoutParams(70, 70).apply {&#10;                setMargins(8, 4, 8, 4)&#10;                gravity = android.view.Gravity.CENTER&#10;            }&#10;            this.layoutParams = layoutParams&#10;&#10;            setOnTouchListener { view, event -&gt;&#10;                if (event.action == MotionEvent.ACTION_DOWN) {&#10;                    val clipData = ClipData.newPlainText(&quot;symbol&quot;, symbol)&#10;                    val shadowBuilder = View.DragShadowBuilder(view)&#10;                    view.startDragAndDrop(clipData, shadowBuilder, view, 0)&#10;                    true&#10;                } else {&#10;                    false&#10;                }&#10;            }&#10;        }&#10;&#10;        // Вставляем символ в правильном порядке&#10;        val symbols = arrayOf(&quot;&lt;&quot;, &quot;&gt;&quot;, &quot;=&quot;)&#10;        val position = symbols.indexOf(symbol)&#10;        if (position != -1 &amp;&amp; position &lt;= comparisonSymbolsContainer.childCount) {&#10;            comparisonSymbolsContainer.addView(symbolView, position)&#10;        } else {&#10;            comparisonSymbolsContainer.addView(symbolView)&#10;        }&#10;    }&#10;&#10;    private fun resetDropZoneBackground() {&#10;        if (comparisonDropZone.text.isEmpty()) {&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone)&#10;        } else {&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone_filled)&#10;        }&#10;    }&#10;&#10;    private fun generateNewQuestion() {&#10;        hasTriedCurrentQuestion = false&#10;        checkButton.isEnabled = false&#10;        nextButton.visibility = Button.GONE&#10;&#10;        // Очищаем предыдущее состояние&#10;        returnSymbolToContainer()&#10;&#10;        // Генерируем два разных числа от 0 до 9&#10;        do {&#10;            leftNumber = Random.nextInt(10)&#10;            rightNumber = Random.nextInt(10)&#10;        } while (leftNumber == rightNumber) // Убеждаемся, что числа разные для начала&#10;&#10;        // В 30% случаев делаем числа равными&#10;        if (Random.nextFloat() &lt; 0.3f) {&#10;            rightNumber = leftNumber&#10;        }&#10;&#10;        // Выбираем случайный объект&#10;        currentObjectType = objectEmojis[Random.nextInt(objectEmojis.size)]&#10;&#10;        // Определяем правильный символ сравнения&#10;        correctComparison = when {&#10;            leftNumber &lt; rightNumber -&gt; &quot;&lt;&quot;&#10;            leftNumber &gt; rightNumber -&gt; &quot;&gt;&quot;&#10;            else -&gt; &quot;=&quot;&#10;        }&#10;&#10;        // Обновляем отображение&#10;        leftNumberDisplay.text = leftNumber.toString()&#10;        rightNumberDisplay.text = rightNumber.toString()&#10;&#10;        leftObjectsDisplay.text = generateObjects(leftNumber)&#10;        rightObjectsDisplay.text = generateObjects(rightNumber)&#10;&#10;        updateProgress()&#10;        updateQuestionText()&#10;        speakQuestion()&#10;    }&#10;&#10;    private fun generateObjects(count: Int): String {&#10;        if (count == 0) return &quot;&quot;&#10;&#10;        // Отображаем все предметы в одну строку&#10;        return currentObjectType.repeat(count)&#10;    }&#10;&#10;    private fun updateQuestionText() {&#10;        questionText.text = &quot;Сравни числа&quot;&#10;        hintText.text = &quot;Перетащи символ сравнения в центр&quot;&#10;    }&#10;&#10;    private fun updateProgress() {&#10;        progressBar.progress = ((currentQuestion.toFloat() / totalQuestions) * 100).toInt()&#10;    }&#10;&#10;    private fun checkAnswer() {&#10;        if (!hasTriedCurrentQuestion) {&#10;            hasTriedCurrentQuestion = true&#10;        }&#10;&#10;        if (selectedSymbol == correctComparison) {&#10;            // Правильный ответ&#10;            score += 100&#10;            totalCorrectAnswers++&#10;            showCorrectFeedback()&#10;            checkButton.isEnabled = false&#10;            nextButton.visibility = Button.VISIBLE&#10;&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_input_correct)&#10;            animateCorrectAnswer(comparisonDropZone)&#10;        } else {&#10;            // Неправильный ответ&#10;            showIncorrectFeedback()&#10;            comparisonDropZone.setBackgroundResource(R.drawable.number_input_incorrect)&#10;            animateIncorrectAnswer(comparisonDropZone)&#10;        }&#10;    }&#10;&#10;    private fun showCorrectFeedback() {&#10;        val phrase = correctPhrases.random()&#10;        hintText.text = phrase&#10;        hintText.setTextColor(ContextCompat.getColor(this, android.R.color.holo_green_dark))&#10;        speakText(phrase)&#10;    }&#10;&#10;    private fun showIncorrectFeedback() {&#10;        hintText.text = &quot;Попробуй еще раз! Сравни количество предметов.&quot;&#10;        hintText.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))&#10;        speakText(&quot;Попробуй еще раз&quot;)&#10;    }&#10;&#10;    private fun nextQuestion() {&#10;        currentQuestion++&#10;&#10;        if (currentQuestion &gt;= totalQuestions) {&#10;            finishGame()&#10;        } else {&#10;            generateNewQuestion()&#10;        }&#10;    }&#10;&#10;    private fun finishGame() {&#10;        val intent = Intent(this, NumberComparisonResultsActivity::class.java)&#10;        intent.putExtra(&quot;score&quot;, score)&#10;        intent.putExtra(&quot;totalCorrectAnswers&quot;, totalCorrectAnswers)&#10;        intent.putExtra(&quot;totalQuestions&quot;, totalQuestions)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun animateCorrectAnswer(view: TextView) {&#10;        val scaleX = ObjectAnimator.ofFloat(view, &quot;scaleX&quot;, 1f, 1.2f, 1f)&#10;        val scaleY = ObjectAnimator.ofFloat(view, &quot;scaleY&quot;, 1f, 1.2f, 1f)&#10;        val animatorSet = AnimatorSet()&#10;        animatorSet.playTogether(scaleX, scaleY)&#10;        animatorSet.duration = 300&#10;        animatorSet.start()&#10;    }&#10;&#10;    private fun animateIncorrectAnswer(view: TextView) {&#10;        val shake = ObjectAnimator.ofFloat(view, &quot;translationX&quot;, 0f, -10f, 10f, -5f, 5f, 0f)&#10;        shake.duration = 500&#10;        shake.start()&#10;    }&#10;&#10;    private fun speakQuestion() {&#10;        val leftDescription = if (leftNumber == 0) &quot;ноль&quot; else &quot;$leftNumber&quot;&#10;        val rightDescription = if (rightNumber == 0) &quot;ноль&quot; else &quot;$rightNumber&quot;&#10;        speakText(&quot;Сравни числа $leftDescription и $rightDescription&quot;)&#10;    }&#10;&#10;    private fun speakComparisonQuestion(symbol: String) {&#10;        val leftDescription = getNumberDescription(leftNumber)&#10;        val rightDescription = getNumberDescription(rightNumber)&#10;&#10;        val symbolDescription = when (symbol) {&#10;            &quot;&lt;&quot; -&gt; &quot;меньше&quot;&#10;            &quot;&gt;&quot; -&gt; &quot;больше&quot;&#10;            &quot;=&quot; -&gt; &quot;равно&quot;&#10;            else -&gt; symbol&#10;        }&#10;&#10;        val encouragement = encouragementPhrases.random()&#10;        val questionText = &quot;$leftDescription $symbolDescription $rightDescription? $encouragement&quot;&#10;        speakText(questionText)&#10;    }&#10;&#10;    private fun getNumberDescription(number: Int): String {&#10;        return when (number) {&#10;            0 -&gt; &quot;ноль&quot;&#10;            1 -&gt; &quot;один&quot;&#10;            2 -&gt; &quot;два&quot;&#10;            3 -&gt; &quot;три&quot;&#10;            4 -&gt; &quot;четыре&quot;&#10;            5 -&gt; &quot;пять&quot;&#10;            6 -&gt; &quot;шесть&quot;&#10;            7 -&gt; &quot;семь&quot;&#10;            8 -&gt; &quot;восемь&quot;&#10;            9 -&gt; &quot;девять&quot;&#10;            else -&gt; number.toString()&#10;        }&#10;    }&#10;&#10;    private fun speakText(text: String) {&#10;        tts?.speak(text, TextToSpeech.QUEUE_FLUSH, null, null)&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts!!.setLanguage(Locale(&quot;ru&quot;, &quot;RU&quot;))&#10;            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {&#10;                tts!!.setLanguage(Locale.getDefault())&#10;            }&#10;            speakQuestion()&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabala/NumberComparisonResultsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabala/NumberComparisonResultsActivity.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.content.Intent&#10;import android.content.pm.ActivityInfo&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.widget.Button&#10;import android.widget.ImageButton&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;&#10;class NumberComparisonResultsActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var tts: TextToSpeech? = null&#10;&#10;    // Варианты поздравлений для разных уровней успеха&#10;    private val excellentPhrases = listOf(&#10;        &quot;Поздравляю! Ты настоящий чемпион по сравнению чисел!&quot;,&#10;        &quot;Невероятно! Ты отлично знаешь, какие числа больше, а какие меньше!&quot;,&#10;        &quot;Браво! Ты справился просто великолепно!&quot;,&#10;        &quot;Супер! Ты становишься настоящим математиком!&quot;&#10;    )&#10;&#10;    private val goodPhrases = listOf(&#10;        &quot;Молодец! Ты хорошо понимаешь сравнение чисел!&quot;,&#10;        &quot;Отлично! Продолжай в том же духе!&quot;,&#10;        &quot;Здорово! Ты делаешь большие успехи!&quot;,&#10;        &quot;Умница! Ты очень хорошо справился!&quot;&#10;    )&#10;&#10;    private val okayPhrases = listOf(&#10;        &quot;Неплохо! Продолжай тренироваться, и у тебя все получится!&quot;,&#10;        &quot;Хорошая попытка! Ты на правильном пути!&quot;,&#10;        &quot;Так держать! С каждым разом у тебя получается лучше!&quot;,&#10;        &quot;Молодец, что стараешься! Продолжай изучать числа!&quot;&#10;    )&#10;&#10;    private val encouragementPhrases = listOf(&#10;        &quot;Не расстраивайся! Все учатся постепенно. Попробуй еще раз!&quot;,&#10;        &quot;Ничего страшного! Каждый математик начинал с простых заданий!&quot;,&#10;        &quot;Не сдавайся! Ты обязательно научишься сравнивать числа!&quot;,&#10;        &quot;Попробуй снова! У тебя все получится!&quot;&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Принудительно устанавливаем альбомную ориентацию&#10;        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE&#10;&#10;        setContentView(R.layout.activity_number_comparison_results)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        tts = TextToSpeech(this, this)&#10;        setupViews()&#10;    }&#10;&#10;    private fun setupViews() {&#10;        val score = intent.getIntExtra(&quot;score&quot;, 0)&#10;        val totalCorrectAnswers = intent.getIntExtra(&quot;totalCorrectAnswers&quot;, 0)&#10;        val totalQuestions = intent.getIntExtra(&quot;totalQuestions&quot;, 20)&#10;&#10;        val scoreDisplay = findViewById&lt;TextView&gt;(R.id.scoreDisplay)&#10;        val correctAnswersDisplay = findViewById&lt;TextView&gt;(R.id.correctAnswersDisplay)&#10;        val accuracyDisplay = findViewById&lt;TextView&gt;(R.id.accuracyDisplay)&#10;        val messageDisplay = findViewById&lt;TextView&gt;(R.id.messageDisplay)&#10;        val motivationalMessage = findViewById&lt;TextView&gt;(R.id.motivationalMessage)&#10;        val performanceBadge = findViewById&lt;TextView&gt;(R.id.performanceBadge)&#10;        val congratulationsIcon = findViewById&lt;TextView&gt;(R.id.congratulationsIcon)&#10;        val achievementStars = findViewById&lt;LinearLayout&gt;(R.id.achievementStars)&#10;&#10;        scoreDisplay.text = &quot;Очки: $score&quot;&#10;        correctAnswersDisplay.text = &quot;Правильных ответов: $totalCorrectAnswers из $totalQuestions&quot;&#10;&#10;        val accuracy = if (totalQuestions &gt; 0) {&#10;            (totalCorrectAnswers.toFloat() / totalQuestions * 100).toInt()&#10;        } else 0&#10;&#10;        accuracyDisplay.text = &quot;Точность: $accuracy%&quot;&#10;&#10;        // Настройка сообщений и внешнего вида в зависимости от результата&#10;        when {&#10;            accuracy &gt;= 90 -&gt; {&#10;                messageDisplay.text = &quot; Поздравляем! Ты чемпион!&quot;&#10;                motivationalMessage.text = &quot;Ты отлично знаешь, как сравнивать числа! Продолжай изучать математику!&quot;&#10;                performanceBadge.text = &quot; ПРЕВОСХОДНО!&quot;&#10;                congratulationsIcon.text = &quot;&quot;&#10;                createStars(achievementStars, 5)&#10;            }&#10;            accuracy &gt;= 75 -&gt; {&#10;                messageDisplay.text = &quot; Отлично! Очень хорошо!&quot;&#10;                motivationalMessage.text = &quot;Ты хорошо понимаешь сравнение чисел! Так держать!&quot;&#10;                performanceBadge.text = &quot; ОТЛИЧНО!&quot;&#10;                congratulationsIcon.text = &quot;&quot;&#10;                createStars(achievementStars, 4)&#10;            }&#10;            accuracy &gt;= 50 -&gt; {&#10;                messageDisplay.text = &quot; Хорошая попытка!&quot;&#10;                motivationalMessage.text = &quot;Ты на правильном пути! Продолжай тренироваться!&quot;&#10;                performanceBadge.text = &quot; ХОРОШО!&quot;&#10;                congratulationsIcon.text = &quot;&quot;&#10;                createStars(achievementStars, 3)&#10;            }&#10;            else -&gt; {&#10;                messageDisplay.text = &quot; Попробуй еще раз!&quot;&#10;                motivationalMessage.text = &quot;Не расстраивайся! Все учатся постепенно. Ты обязательно справишься!&quot;&#10;                performanceBadge.text = &quot; СТАРАЙСЯ!&quot;&#10;                congratulationsIcon.text = &quot;&quot;&#10;                createStars(achievementStars, 2)&#10;            }&#10;        }&#10;&#10;        // Кнопки&#10;        findViewById&lt;Button&gt;(R.id.restartButton).setOnClickListener {&#10;            val intent = Intent(this, NumberComparisonActivity::class.java)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        findViewById&lt;Button&gt;(R.id.homeButton).setOnClickListener {&#10;            val intent = Intent(this, MathExercisesActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        findViewById&lt;ImageButton&gt;(R.id.backButton).setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun createStars(container: LinearLayout, count: Int) {&#10;        container.removeAllViews()&#10;        &#10;        for (i in 1..5) {&#10;            val star = TextView(this).apply {&#10;                text = if (i &lt;= count) &quot;⭐&quot; else &quot;☆&quot;&#10;                textSize = 24f&#10;                setPadding(4, 0, 4, 0)&#10;            }&#10;            container.addView(star)&#10;        }&#10;    }&#10;&#10;    private fun speakCongratulations(accuracy: Int) {&#10;        val congratulationPhrase = when {&#10;            accuracy &gt;= 90 -&gt; excellentPhrases.random()&#10;            accuracy &gt;= 75 -&gt; goodPhrases.random()&#10;            accuracy &gt;= 50 -&gt; okayPhrases.random()&#10;            else -&gt; encouragementPhrases.random()&#10;        }&#10;        &#10;        speakText(congratulationPhrase)&#10;    }&#10;&#10;    private fun speakText(text: String) {&#10;        tts?.speak(text, TextToSpeech.QUEUE_ADD, null, null)&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts!!.setLanguage(Locale(&quot;ru&quot;, &quot;RU&quot;))&#10;            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {&#10;                tts!!.setLanguage(Locale.getDefault())&#10;            }&#10;            &#10;            // Озвучиваем поздравления через секунду после инициализации TTS&#10;            val accuracy = if (intent.getIntExtra(&quot;totalQuestions&quot;, 20) &gt; 0) {&#10;                (intent.getIntExtra(&quot;totalCorrectAnswers&quot;, 0).toFloat() / intent.getIntExtra(&quot;totalQuestions&quot;, 20) * 100).toInt()&#10;            } else 0&#10;            &#10;            // Небольшая задержка для лучшего восприятия&#10;            android.os.Handler(mainLooper).postDelayed({&#10;                speakCongratulations(accuracy)&#10;            }, 1000)&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabala/NumberSequenceModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabala/NumberSequenceModels.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabalanumbers/AudioButtonsAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabalanumbers/AudioButtonsAdapter.kt" />
              <option name="updatedContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.cardview.widget.CardView&#10;import androidx.recyclerview.widget.RecyclerView&#10;&#10;class AudioButtonsAdapter(&#10;    private var items: MutableList&lt;MatchingItem&gt;,&#10;    private val onItemClick: (MatchingItem, View) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;AudioButtonsAdapter.AudioButtonViewHolder&gt;() {&#10;&#10;    class AudioButtonViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val cardView: CardView = itemView.findViewById(R.id.cardView)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AudioButtonViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_audio_button, parent, false)&#10;        return AudioButtonViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: AudioButtonViewHolder, position: Int) {&#10;        val item = items[position]&#10;&#10;        // Устанавливаем прозрачность для сопоставленных элементов&#10;        holder.cardView.alpha = if (item.isMatched) 0.3f else 1.0f&#10;&#10;        holder.cardView.setOnClickListener {&#10;            if (!item.isMatched) {&#10;                // Простой эффект нажатия&#10;                holder.cardView.animate().scaleX(0.95f).scaleY(0.95f).setDuration(100)&#10;                    .withEndAction {&#10;                        holder.cardView.animate().scaleX(1.0f).scaleY(1.0f).setDuration(100).start()&#10;                    }.start()&#10;&#10;                onItemClick(item, holder.cardView)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = items.size&#10;&#10;    fun updateItems(newItems: List&lt;MatchingItem&gt;) {&#10;        items.clear()&#10;        items.addAll(newItems)&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    fun removeItem(item: MatchingItem) {&#10;        val position = items.indexOf(item)&#10;        if (position != -1) {&#10;            items.removeAt(position)&#10;            notifyItemRemoved(position)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabalanumbers/AudioMatchingActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabalanumbers/AudioMatchingActivity.kt" />
              <option name="updatedContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.animation.Animator&#10;import android.animation.AnimatorListenerAdapter&#10;import android.animation.ValueAnimator&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.view.View&#10;import android.widget.ImageView&#10;import android.widget.LinearLayout&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import java.util.Locale&#10;import kotlin.random.Random&#10;&#10;class AudioMatchingActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private lateinit var audioButtonsRecyclerView: RecyclerView&#10;    private lateinit var numbersRecyclerView: RecyclerView&#10;    private lateinit var audioButtonsAdapter: AudioButtonsAdapter&#10;    private lateinit var numbersAdapter: NumbersAdapter&#10;    private lateinit var progressBar: ProgressBar&#10;    private lateinit var backButton: ImageView&#10;&#10;    private var currentLevel = 1&#10;    private var totalLevels = 10&#10;    private var levels = mutableListOf&lt;AudioMatchingLevel&gt;()&#10;    private var currentLevelData: AudioMatchingLevel? = null&#10;&#10;    private var selectedAudioItem: MatchingItem? = null&#10;    private var selectedNumberItem: MatchingItem? = null&#10;    private var selectedAudioView: View? = null&#10;    private var selectedNumberView: View? = null&#10;&#10;    private var completedMatches = 0&#10;    private var correctActions = 0&#10;    private var incorrectActions = 0&#10;&#10;    private lateinit var tts: TextToSpeech&#10;    private var isTtsReady = false&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_audio_matching)&#10;&#10;        initTTS()&#10;        initViews()&#10;        initData()&#10;        setupRecyclerViews()&#10;        loadLevel(currentLevel)&#10;    }&#10;&#10;    private fun initTTS() {&#10;        tts = TextToSpeech(this, this)&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts.setLanguage(Locale(&quot;ru&quot;))&#10;            isTtsReady = result != TextToSpeech.LANG_MISSING_DATA &amp;&amp; result != TextToSpeech.LANG_NOT_SUPPORTED&#10;        }&#10;    }&#10;&#10;    private fun speakNumber(number: Int) {&#10;        if (isTtsReady) {&#10;            val numberText = when (number) {&#10;                1 -&gt; &quot;один&quot;&#10;                2 -&gt; &quot;два&quot;&#10;                3 -&gt; &quot;три&quot;&#10;                4 -&gt; &quot;четыре&quot;&#10;                5 -&gt; &quot;пять&quot;&#10;                6 -&gt; &quot;шесть&quot;&#10;                7 -&gt; &quot;семь&quot;&#10;                8 -&gt; &quot;восемь&quot;&#10;                9 -&gt; &quot;девять&quot;&#10;                else -&gt; number.toString()&#10;            }&#10;            tts.speak(numberText, TextToSpeech.QUEUE_FLUSH, null, null)&#10;        }&#10;    }&#10;&#10;    private fun speakText(text: String) {&#10;        if (isTtsReady) {&#10;            tts.speak(text, TextToSpeech.QUEUE_FLUSH, null, null)&#10;        }&#10;    }&#10;&#10;    private fun initViews() {&#10;        audioButtonsRecyclerView = findViewById(R.id.audioButtonsRecyclerView)&#10;        numbersRecyclerView = findViewById(R.id.numbersRecyclerView)&#10;        progressBar = findViewById(R.id.progressBar)&#10;        backButton = findViewById(R.id.backButton)&#10;&#10;        backButton.setOnClickListener {&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun initData() {&#10;        levels = AudioMatchingGameData.generateAllLevels().toMutableList()&#10;    }&#10;&#10;    private fun setupRecyclerViews() {&#10;        audioButtonsAdapter = AudioButtonsAdapter(mutableListOf()) { item, view -&gt;&#10;            onAudioButtonClick(item, view)&#10;        }&#10;&#10;        numbersAdapter = NumbersAdapter(mutableListOf()) { item, view -&gt;&#10;            onNumberItemClick(item, view)&#10;        }&#10;&#10;        audioButtonsRecyclerView.apply {&#10;            layoutManager = LinearLayoutManager(this@AudioMatchingActivity)&#10;            adapter = audioButtonsAdapter&#10;        }&#10;&#10;        numbersRecyclerView.apply {&#10;            layoutManager = LinearLayoutManager(this@AudioMatchingActivity)&#10;            adapter = numbersAdapter&#10;        }&#10;    }&#10;&#10;    private fun loadLevel(level: Int) {&#10;        currentLevelData = levels[level - 1]&#10;        updateProgressBar()&#10;        completedMatches = 0&#10;&#10;        // Перемешиваем элементы для случайного порядка&#10;        val audioButtons = currentLevelData!!.pairs.map { it.number }.shuffled()&#10;        val numbers = currentLevelData!!.pairs.map { it.number }.shuffled()&#10;&#10;        audioButtonsAdapter.updateItems(audioButtons)&#10;        numbersAdapter.updateItems(numbers)&#10;&#10;        clearSelections()&#10;        resetViewsAlpha()&#10;    }&#10;&#10;    private fun updateProgressBar() {&#10;        val progress = (currentLevel * 100) / totalLevels&#10;        progressBar.progress = progress&#10;    }&#10;&#10;    private fun resetViewsAlpha() {&#10;        audioButtonsRecyclerView.post {&#10;            for (i in 0 until audioButtonsRecyclerView.childCount) {&#10;                val child = audioButtonsRecyclerView.getChildAt(i)&#10;                child.alpha = 1.0f&#10;                child.scaleX = 1.0f&#10;                child.scaleY = 1.0f&#10;            }&#10;        }&#10;&#10;        numbersRecyclerView.post {&#10;            for (i in 0 until numbersRecyclerView.childCount) {&#10;                val child = numbersRecyclerView.getChildAt(i)&#10;                child.alpha = 1.0f&#10;                child.scaleX = 1.0f&#10;                child.scaleY = 1.0f&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun onAudioButtonClick(item: MatchingItem, view: View) {&#10;        if (item.isMatched) return&#10;&#10;        // Озвучиваем число&#10;        speakNumber(item.value)&#10;&#10;        // Убираем предыдущее выделение&#10;        selectedAudioView?.let { prevView -&gt;&#10;            val linearLayout = prevView.findViewById&lt;LinearLayout&gt;(R.id.audioButtonLayout)&#10;            linearLayout?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, android.R.color.white))&#10;        }&#10;&#10;        if (selectedAudioItem == item) {&#10;            clearSelections()&#10;            return&#10;        }&#10;&#10;        selectedAudioItem = item&#10;        selectedAudioView = view&#10;&#10;        // Выделяем элемент зеленым цветом&#10;        val linearLayout = view.findViewById&lt;LinearLayout&gt;(R.id.audioButtonLayout)&#10;        linearLayout?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        checkMatch()&#10;    }&#10;&#10;    private fun onNumberItemClick(item: MatchingItem, view: View) {&#10;        if (item.isMatched) return&#10;&#10;        // Убираем предыдущее выделение&#10;        selectedNumberView?.let { prevView -&gt;&#10;            val numberText = prevView.findViewById&lt;TextView&gt;(R.id.numberText)&#10;            numberText?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, R.color.button_color))&#10;        }&#10;&#10;        if (selectedNumberItem == item) {&#10;            clearSelections()&#10;            return&#10;        }&#10;&#10;        selectedNumberItem = item&#10;        selectedNumberView = view&#10;&#10;        // Выделяем элемент зеленым цветом&#10;        val numberText = view.findViewById&lt;TextView&gt;(R.id.numberText)&#10;        numberText?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;&#10;        checkMatch()&#10;    }&#10;&#10;    private fun checkMatch() {&#10;        val audioItem = selectedAudioItem&#10;        val numberItem = selectedNumberItem&#10;&#10;        if (audioItem != null &amp;&amp; numberItem != null) {&#10;            if (audioItem.value == numberItem.value) {&#10;                onCorrectMatch(audioItem, numberItem)&#10;            } else {&#10;                onIncorrectMatch()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun onCorrectMatch(audioItem: MatchingItem, numberItem: MatchingItem) {&#10;        correctActions++&#10;&#10;        val randomPhrase = MatchingFeedbackPhrases.correctPhrases[Random.nextInt(MatchingFeedbackPhrases.correctPhrases.size)]&#10;        speakText(randomPhrase)&#10;&#10;        audioItem.isMatched = true&#10;        numberItem.isMatched = true&#10;&#10;        animateMatch(selectedAudioView!!, selectedNumberView!!) {&#10;            audioButtonsAdapter.removeItem(audioItem)&#10;            numbersAdapter.removeItem(numberItem)&#10;&#10;            completedMatches++&#10;&#10;            if (completedMatches &gt;= 5) {&#10;                onLevelCompleted()&#10;            }&#10;        }&#10;&#10;        clearSelections()&#10;    }&#10;&#10;    private fun onIncorrectMatch() {&#10;        incorrectActions++&#10;&#10;        val randomPhrase = MatchingFeedbackPhrases.incorrectPhrases[Random.nextInt(MatchingFeedbackPhrases.incorrectPhrases.size)]&#10;        speakText(randomPhrase)&#10;&#10;        // Выделяем обе карточки красным цветом на полсекунды&#10;        selectedAudioView?.let { view -&gt;&#10;            val linearLayout = view.findViewById&lt;LinearLayout&gt;(R.id.audioButtonLayout)&#10;            linearLayout?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;        }&#10;&#10;        selectedNumberView?.let { view -&gt;&#10;            val numberText = view.findViewById&lt;TextView&gt;(R.id.numberText)&#10;            numberText?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, android.R.color.holo_red_light))&#10;        }&#10;&#10;        // Через 500ms возвращаем зеленое выделение&#10;        android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;            selectedAudioView?.let { view -&gt;&#10;                val linearLayout = view.findViewById&lt;LinearLayout&gt;(R.id.audioButtonLayout)&#10;                linearLayout?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;            }&#10;&#10;            selectedNumberView?.let { view -&gt;&#10;                val numberText = view.findViewById&lt;TextView&gt;(R.id.numberText)&#10;                numberText?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, android.R.color.holo_green_light))&#10;            }&#10;        }, 500)&#10;&#10;        animateIncorrectMatch(selectedAudioView!!, selectedNumberView!!)&#10;    }&#10;&#10;    private fun animateMatch(view1: View, view2: View, onComplete: () -&gt; Unit) {&#10;        val animator1 = ValueAnimator.ofFloat(1f, 0f)&#10;        val animator2 = ValueAnimator.ofFloat(1f, 0f)&#10;&#10;        animator1.duration = 300&#10;        animator2.duration = 300&#10;&#10;        animator1.addUpdateListener { animation -&gt;&#10;            val alpha = animation.animatedValue as Float&#10;            view1.alpha = alpha&#10;            view1.scaleX = alpha&#10;            view1.scaleY = alpha&#10;        }&#10;&#10;        animator2.addUpdateListener { animation -&gt;&#10;            val alpha = animation.animatedValue as Float&#10;            view2.alpha = alpha&#10;            view2.scaleX = alpha&#10;            view2.scaleY = alpha&#10;        }&#10;&#10;        animator1.addListener(object : AnimatorListenerAdapter() {&#10;            override fun onAnimationEnd(animation: Animator) {&#10;                onComplete()&#10;            }&#10;        })&#10;&#10;        animator1.start()&#10;        animator2.start()&#10;    }&#10;&#10;    private fun animateIncorrectMatch(view1: View, view2: View) {&#10;        val shake = ValueAnimator.ofFloat(0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)&#10;        shake.duration = 600&#10;&#10;        shake.addUpdateListener { animation -&gt;&#10;            val translateX = animation.animatedValue as Float&#10;            view1.translationX = translateX&#10;            view2.translationX = translateX&#10;        }&#10;&#10;        shake.addListener(object : AnimatorListenerAdapter() {&#10;            override fun onAnimationEnd(animation: Animator) {&#10;                view1.translationX = 0f&#10;                view2.translationX = 0f&#10;            }&#10;        })&#10;&#10;        shake.start()&#10;    }&#10;&#10;    private fun clearSelections() {&#10;        selectedAudioItem = null&#10;        selectedNumberItem = null&#10;&#10;        selectedAudioView?.let { view -&gt;&#10;            val linearLayout = view.findViewById&lt;LinearLayout&gt;(R.id.audioButtonLayout)&#10;            linearLayout?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, android.R.color.white))&#10;        }&#10;&#10;        selectedNumberView?.let { view -&gt;&#10;            val numberText = view.findViewById&lt;TextView&gt;(R.id.numberText)&#10;            numberText?.setBackgroundColor(androidx.core.content.ContextCompat.getColor(this, R.color.button_color))&#10;        }&#10;&#10;        selectedAudioView = null&#10;        selectedNumberView = null&#10;    }&#10;&#10;    private fun onLevelCompleted() {&#10;        if (currentLevel &lt; totalLevels) {&#10;            currentLevel++&#10;            loadLevel(currentLevel)&#10;        } else {&#10;            showResults()&#10;        }&#10;    }&#10;&#10;    private fun showResults() {&#10;        val finalScore = (correctActions * 10) - (incorrectActions * 5)&#10;&#10;        val intent = Intent(this, AudioMatchingResultsActivity::class.java)&#10;        intent.putExtra(&quot;completed_levels&quot;, currentLevel)&#10;        intent.putExtra(&quot;correct_actions&quot;, correctActions)&#10;        intent.putExtra(&quot;incorrect_actions&quot;, incorrectActions)&#10;        intent.putExtra(&quot;final_score&quot;, finalScore)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        if (::tts.isInitialized) {&#10;            tts.stop()&#10;            tts.shutdown()&#10;        }&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabalanumbers/AudioMatchingModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabalanumbers/AudioMatchingModels.kt" />
              <option name="updatedContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;data class AudioMatchingLevel(&#10;    val pairs: List&lt;AudioMatchingPair&gt;&#10;)&#10;&#10;data class AudioMatchingPair(&#10;    val number: MatchingItem // Используем ту же модель, что и в обычном сопоставлении&#10;)&#10;&#10;object AudioMatchingGameData {&#10;    fun generateAllLevels(): List&lt;AudioMatchingLevel&gt; {&#10;        val levels = mutableListOf&lt;AudioMatchingLevel&gt;()&#10;        &#10;        // Создаем 10 уровней&#10;        repeat(10) { levelIndex -&gt;&#10;            val pairs = mutableListOf&lt;AudioMatchingPair&gt;()&#10;            &#10;            // Генерируем 5 пар чисел для каждого уровня&#10;            val usedNumbers = mutableSetOf&lt;Int&gt;()&#10;            repeat(5) {&#10;                var number: Int&#10;                do {&#10;                    number = (1..9).random()&#10;                } while (usedNumbers.contains(number))&#10;                &#10;                usedNumbers.add(number)&#10;                &#10;                val matchingItem = MatchingItem(&#10;                    value = number,&#10;                    emoji = &quot;&quot;, // Для аудио кнопок не нужен emoji&#10;                    isMatched = false&#10;                )&#10;                &#10;                pairs.add(AudioMatchingPair(matchingItem))&#10;            }&#10;            &#10;            levels.add(AudioMatchingLevel(pairs))&#10;        }&#10;        &#10;        return levels&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabalanumbers/AudioMatchingResultsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/danabalanumbers/AudioMatchingResultsActivity.kt" />
              <option name="updatedContent" value="package com.timursarsembayev.danabalanumbers&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.speech.tts.TextToSpeech&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.cardview.widget.CardView&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class AudioMatchingResultsActivity : AppCompatActivity(), TextToSpeech.OnInitListener {&#10;&#10;    private var tts: TextToSpeech? = null&#10;    private var isTtsReady = false&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_audio_matching_results)&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Инициализация TTS&#10;        tts = TextToSpeech(this, this)&#10;&#10;        setupViews()&#10;        setupButtons()&#10;    }&#10;&#10;    override fun onInit(status: Int) {&#10;        if (status == TextToSpeech.SUCCESS) {&#10;            val result = tts?.setLanguage(Locale(&quot;ru&quot;))&#10;            isTtsReady = result != TextToSpeech.LANG_MISSING_DATA &amp;&amp; result != TextToSpeech.LANG_NOT_SUPPORTED&#10;&#10;            if (isTtsReady) {&#10;                speakCongratulation()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupViews() {&#10;        val completedLevels = intent.getIntExtra(&quot;completed_levels&quot;, 10)&#10;        val correctActions = intent.getIntExtra(&quot;correct_actions&quot;, 0)&#10;        val incorrectActions = intent.getIntExtra(&quot;incorrect_actions&quot;, 0)&#10;        val finalScore = intent.getIntExtra(&quot;final_score&quot;, 0)&#10;&#10;        // Обновляем UI с результатами&#10;        findViewById&lt;TextView&gt;(R.id.completedLevelsText).text = &quot;Пройдено уровней: $completedLevels&quot;&#10;        findViewById&lt;TextView&gt;(R.id.correctActionsText).text = &quot;Правильных действий: $correctActions&quot;&#10;        findViewById&lt;TextView&gt;(R.id.incorrectActionsText).text = &quot;Ошибок: $incorrectActions&quot;&#10;        findViewById&lt;TextView&gt;(R.id.finalScoreText).text = &quot;Итоговые очки: $finalScore&quot;&#10;&#10;        // Определяем сообщение в зависимости от результата&#10;        val accuracy = if (correctActions + incorrectActions &gt; 0) {&#10;            (correctActions * 100) / (correctActions + incorrectActions)&#10;        } else {&#10;            100&#10;        }&#10;&#10;        val (message, encouragement) = when {&#10;            accuracy &gt;= 90 -&gt; Pair(&quot;Превосходно! &quot;, &quot;Ты отлично слышишь и различаешь числа!&quot;)&#10;            accuracy &gt;= 70 -&gt; Pair(&quot;Отлично! &quot;, &quot;Ты хорошо сопоставляешь звуки с цифрами!&quot;)&#10;            accuracy &gt;= 50 -&gt; Pair(&quot;Хорошо! &quot;, &quot;Продолжай тренироваться!&quot;)&#10;            else -&gt; Pair(&quot;Не сдавайся! &quot;, &quot;С каждым разом будет лучше!&quot;)&#10;        }&#10;&#10;        findViewById&lt;TextView&gt;(R.id.resultMessage).text = message&#10;        findViewById&lt;TextView&gt;(R.id.encouragementText).text = encouragement&#10;    }&#10;&#10;    private fun speakCongratulation() {&#10;        if (isTtsReady) {&#10;            val correctActions = intent.getIntExtra(&quot;correct_actions&quot;, 0)&#10;            val incorrectActions = intent.getIntExtra(&quot;incorrect_actions&quot;, 0)&#10;&#10;            val accuracy = if (correctActions + incorrectActions &gt; 0) {&#10;                (correctActions * 100) / (correctActions + incorrectActions)&#10;            } else {&#10;                100&#10;            }&#10;&#10;            val phrases = when {&#10;                accuracy == 100 -&gt; DifferentiatedCongratulationPhrases.perfect100Phrases&#10;                accuracy &gt;= 90 -&gt; DifferentiatedCongratulationPhrases.excellent90Phrases&#10;                accuracy &gt;= 80 -&gt; DifferentiatedCongratulationPhrases.good80Phrases&#10;                else -&gt; DifferentiatedCongratulationPhrases.encouragement80Phrases&#10;            }&#10;&#10;            val randomPhrase = phrases[Random.nextInt(phrases.size)]&#10;            tts?.speak(randomPhrase, TextToSpeech.QUEUE_FLUSH, null, &quot;congratulation&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupButtons() {&#10;        findViewById&lt;CardView&gt;(R.id.btnPlayAgain).setOnClickListener {&#10;            stopTTS()&#10;            val intent = Intent(this, AudioMatchingActivity::class.java)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        findViewById&lt;CardView&gt;(R.id.btnBackToMenu).setOnClickListener {&#10;            stopTTS()&#10;            val intent = Intent(this, MathExercisesActivity::class.java)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        findViewById&lt;ImageView&gt;(R.id.btnBack).setOnClickListener {&#10;            stopTTS()&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun stopTTS() {&#10;        tts?.stop()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        tts?.stop()&#10;        tts?.shutdown()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;#FFF3E0&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#FF9800&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_reading_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_reading_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#F3E5F5&quot;&#10;        android:centerColor=&quot;#E1BEE7&quot;&#10;        android:endColor=&quot;#CE93D8&quot;&#10;        android:angle=&quot;315&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_ascending_numbers.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_ascending_numbers.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_descending_numbers.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_descending_numbers.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_letter_recognition_fixed.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_letter_recognition_fixed.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/gradient_exercise_background&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    tools:context=&quot;.LetterRecognitionActivity&quot;&gt;&#10;&#10;    &lt;!-- Верхняя панель с кнопкой назад, заголовком и прогресс-баром --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;        &lt;!-- Кнопка назад --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/backButton&quot;&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot;&#10;            android:src=&quot;@drawable/ic_arrow_back&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:padding=&quot;4dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&#10;            android:contentDescription=&quot;Назад&quot; /&gt;&#10;&#10;        &lt;!-- Заголовок --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot; Найди букву&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#8E24AA&quot;&#10;            android:layout_marginStart=&quot;12dp&quot;&#10;            android:gravity=&quot;start&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Прогресс-бар --&gt;&#10;    &lt;ProgressBar&#10;        android:id=&quot;@+id/progressBar&quot;&#10;        style=&quot;?android:attr/progressBarStyleHorizontal&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;30dp&quot;&#10;        android:max=&quot;100&quot;&#10;        android:progress=&quot;3&quot;&#10;        android:progressTint=&quot;#9C27B0&quot;&#10;        android:progressBackgroundTint=&quot;#E0E0E0&quot; /&gt;&#10;&#10;    &lt;!-- Красивая кнопка озвучивания --&gt;&#10;    &lt;androidx.cardview.widget.CardView&#10;        android:layout_width=&quot;80dp&quot;&#10;        android:layout_height=&quot;80dp&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;40dp&quot;&#10;        app:cardCornerRadius=&quot;40dp&quot;&#10;        app:cardElevation=&quot;12dp&quot;&#10;        app:cardBackgroundColor=&quot;#8E24AA&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/speakerButton&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:src=&quot;@drawable/ic_volume_up&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&#10;            android:contentDescription=&quot;Озвучить вопрос&quot;&#10;            android:tint=&quot;#FFFFFF&quot;&#10;            android:scaleType=&quot;centerInside&quot; /&gt;&#10;&#10;    &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;    &lt;!-- Сетка карточек с буквами (2x2) --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:gravity=&quot;center&quot;&gt;&#10;&#10;        &lt;!-- Первый ряд --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;            &lt;!-- Карточка 1 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card1&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/letter1&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;А&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#8E24AA&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Карточка 2 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card2&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/letter2&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;Б&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#8E24AA&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Второй ряд --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;!-- Карточка 3 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card3&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/letter3&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;В&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#8E24AA&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Карточка 4 --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card4&quot;&#10;                android:layout_width=&quot;120dp&quot;&#10;                android:layout_height=&quot;120dp&quot;&#10;                android:layout_margin=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/letter4&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;Г&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#8E24AA&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_math_exercises.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_math_exercises.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@drawable/child_gradient_blue&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/main&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        tools:context=&quot;.MathExercisesActivity&quot;&gt;&#10;&#10;        &lt;!-- Заголовок --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;&quot;&#10;                android:textSize=&quot;32sp&quot;&#10;                android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;DanaBala:\nИзучение цифр и чисел&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#1565C0&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Список упражнений --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Упражнение: Знакомство с цифрами (НОВОЕ - первое в списке) --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardNumberIntroduction&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#E1F5FE&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Знакомство с цифрами&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#0277BD&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Изучи цифры от 0 до 9 с объяснениями&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Изучение цифр --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardNumbers&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#E8F5E8&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Найди цифру&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#2E7D32&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Слушай и выбирай правильную цифру&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Найди количество --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardCounting&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#F3E5F5&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Найди количество&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#7B1FA2&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Покажи правильное количество предметов&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Посчитай предметы --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardObjectCounting&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFF3E0&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Посчитай предметы&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#E65100&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Посмотри на предметы и выбери правильное число&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Сопоставление --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardMatching&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#E3F2FD&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Сопоставление&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#1976D2&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Соедини числа с количеством предметов&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Сопоставление по звуку --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardAudioMatching&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#F1F8E9&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Сопоставление по звуку&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#689F38&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Слушай звуки и соединяй с правильными числами&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Последовательность по возрастанию --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardAscendingSequence&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#E8F5E8&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Числа по возрастанию&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#2E7D32&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Заполни пропущенные числа по порядку&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Последовательность по убыванию --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardDescendingSequence&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFEBEE&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Числа по убыванию&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#D32F2F&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Заполни пропущенные числа в обратном порядке&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Сравнение чисел --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardNumberComparison&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#F9FBE7&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;⚖️&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Сравнение чисел&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#827717&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Сравни числа с помощью знаков &gt;, &lt;, =&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@drawable/child_gradient_blue&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/main&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        tools:context=&quot;.MathExercisesActivity&quot;&gt;&#10;&#10;        &lt;!-- Заголовок --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;&quot;&#10;                android:textSize=&quot;32sp&quot;&#10;                android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;DanaBala:\nИзучение цифр и чисел&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#1565C0&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Список упражнений --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Упражнение: Знакомство с цифрами (НОВОЕ - первое в списке) --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardNumberIntroduction&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#E1F5FE&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Знакомство с цифрами&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#0277BD&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Изучи цифры от 0 до 9 с объяснениями&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Изучение цифр --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardNumbers&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#E8F5E8&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Найди цифру&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#2E7D32&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Слушай и выбирай правильную цифру&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Найди количество --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardCounting&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#F3E5F5&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Найди количество&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#7B1FA2&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Покажи правильное количество предметов&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Посчитай предметы --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardObjectCounting&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFF3E0&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Посчитай предметы&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#E65100&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Посмотри на предметы и выбери правильное число&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Сопоставление --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardMatching&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#E3F2FD&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Сопоставление&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#1976D2&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Соедини числа с количеством предметов&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Сопоставление по звуку --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardAudioMatching&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#F1F8E9&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Сопоставление по звуку&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#689F38&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Слушай звуки и соединяй с правильными числами&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Последовательность по возрастанию --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardAscendingSequence&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#E8F5E8&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Числа по возрастанию&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#2E7D32&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Заполни пропущенные числа по порядку&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Последовательность по убыванию --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardDescendingSequence&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#FFEBEE&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Числа по убыванию&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#D32F2F&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Заполни пропущенные числа в обратном порядке&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Упражнение: Сравнение чисел --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardNumberComparison&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                app:cardBackgroundColor=&quot;#F9FBE7&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;⚖️&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Сравнение чисел&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;#827717&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Сравни числа с помощью знаков &gt;, &amp;lt;, =&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;#666666&quot;&#10;                            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_number_comparison.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_number_comparison.xml" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/child_gradient_blue&quot;&#10;    android:padding=&quot;12dp&quot;&#10;    tools:context=&quot;.NumberComparisonActivity&quot;&gt;&#10;&#10;    &lt;!-- Header with Back Button --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/backButton&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:src=&quot;@drawable/ic_arrow_back&quot;&#10;            android:contentDescription=&quot;Назад&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;⚖️&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/questionText&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Сравни числа&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#1565C0&quot; /&gt;&#10;&#10;        &lt;!-- Progress Bar --&gt;&#10;        &lt;ProgressBar&#10;            android:id=&quot;@+id/progressBar&quot;&#10;            style=&quot;?android:attr/progressBarStyleHorizontal&quot;&#10;            android:layout_width=&quot;100dp&quot;&#10;            android:layout_height=&quot;6dp&quot;&#10;            android:progress=&quot;0&quot;&#10;            android:progressTint=&quot;#4CAF50&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Main Comparison Area --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;        &lt;!-- Left Number Card --&gt;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;8dp&quot;&#10;            app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/leftNumberDisplay&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;3&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#2196F3&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/leftObjectsDisplay&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;0dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:lineSpacingExtra=&quot;2dp&quot;&#10;                    android:maxLines=&quot;3&quot;&#10;                    android:ellipsize=&quot;none&quot;&#10;                    android:scrollHorizontally=&quot;false&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;!-- Center Comparison Area --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginHorizontal=&quot;8dp&quot;&gt;&#10;&#10;            &lt;!-- Drop Zone for Comparison Symbol --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/comparisonDropZone&quot;&#10;                android:layout_width=&quot;80dp&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:background=&quot;@drawable/number_drop_zone&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:textSize=&quot;36sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#333333&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;!-- Comparison Symbols --&gt;&#10;            &lt;LinearLayout&#10;                android:id=&quot;@+id/comparisonSymbolsContainer&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;                &lt;!-- Символы будут добавлены программно --&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Right Number Card --&gt;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;8dp&quot;&#10;            app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/rightNumberDisplay&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;4&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#2196F3&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/rightObjectsDisplay&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;0dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:lineSpacingExtra=&quot;2dp&quot;&#10;                    android:maxLines=&quot;3&quot;&#10;                    android:ellipsize=&quot;none&quot;&#10;                    android:scrollHorizontally=&quot;false&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Bottom Area with Hint and Buttons --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- Hint Text --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/hintText&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Перетащи символ сравнения в центр&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;#666666&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:background=&quot;@drawable/hint_background&quot; /&gt;&#10;&#10;        &lt;!-- Buttons --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/checkButton&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;Проверить&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#FFFFFF&quot;&#10;                android:background=&quot;@drawable/button_check&quot;&#10;                android:elevation=&quot;4dp&quot;&#10;                android:enabled=&quot;false&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/nextButton&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:text=&quot;Далее&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#FFFFFF&quot;&#10;                android:background=&quot;@drawable/button_next&quot;&#10;                android:elevation=&quot;4dp&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_number_comparison_results.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_number_comparison_results.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/child_gradient_blue&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    tools:context=&quot;.NumberComparisonResultsActivity&quot;&gt;&#10;&#10;    &lt;!-- Header with Back Button --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/backButton&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:src=&quot;@drawable/ic_arrow_back&quot;&#10;            android:contentDescription=&quot;Назад&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textSize=&quot;32sp&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Результаты сравнения&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#1565C0&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Main Content Area with Two Blocks --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- Left Block - Statistics --&gt;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;8dp&quot;&#10;            app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;24dp&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;&quot;&#10;                    android:textSize=&quot;48sp&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Твои результаты&quot;&#10;                    android:textSize=&quot;20sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#1565C0&quot;&#10;                    android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;                &lt;!-- Score Display --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/scoreDisplay&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Очки: 1500&quot;&#10;                    android:textSize=&quot;22sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#4CAF50&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;!-- Correct Answers Display --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/correctAnswersDisplay&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Правильных ответов: 15 из 20&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#333333&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;!-- Accuracy Display --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/accuracyDisplay&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Точность: 75%&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#333333&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;!-- Performance Badge --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/performanceBadge&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot; ОТЛИЧНО!&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#FF9800&quot;&#10;                    android:background=&quot;@drawable/badge_background&quot;&#10;                    android:padding=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;!-- Right Block - Congratulations and Motivation --&gt;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;8dp&quot;&#10;            app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;24dp&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;!-- Congratulations Icon --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/congratulationsIcon&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;&quot;&#10;                    android:textSize=&quot;64sp&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;!-- Main Message --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/messageDisplay&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Поздравляем! Ты отлично справился с упражнением!&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#1565C0&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;!-- Motivational Message --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/motivationalMessage&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Ты становишься настоящим математиком! Продолжай изучать числа и их сравнение.&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#666666&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:layout_marginBottom=&quot;20dp&quot; /&gt;&#10;&#10;                &lt;!-- Achievement Stars --&gt;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/achievementStars&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center&quot;&gt;&#10;                    &lt;!-- Звезды будут добавлены программно --&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Bottom Buttons --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/restartButton&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            android:text=&quot; Играть снова&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:background=&quot;@drawable/button_check&quot;&#10;            android:elevation=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/homeButton&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:text=&quot; На главную&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:background=&quot;@drawable/button_next&quot;&#10;            android:elevation=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/child_gradient_blue&quot;&#10;    android:padding=&quot;12dp&quot;&#10;    tools:context=&quot;.NumberComparisonResultsActivity&quot;&gt;&#10;&#10;    &lt;!-- Header with Back Button --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/backButton&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:src=&quot;@drawable/ic_arrow_back&quot;&#10;            android:contentDescription=&quot;Назад&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Результаты сравнения&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#1565C0&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Main Content Area with Two Blocks --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;        &lt;!-- Left Block - Statistics --&gt;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;6dp&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;8dp&quot;&#10;            app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;            &lt;ScrollView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&#10;                    android:gravity=&quot;center_horizontal&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;36sp&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Твои результаты&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#1565C0&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;!-- Score Display --&gt;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/scoreDisplay&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Очки: 1500&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#4CAF50&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;!-- Correct Answers Display --&gt;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/correctAnswersDisplay&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Правильных ответов: 15 из 20&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textColor=&quot;#333333&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_marginBottom=&quot;10dp&quot; /&gt;&#10;&#10;                    &lt;!-- Accuracy Display --&gt;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/accuracyDisplay&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Точность: 75%&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textColor=&quot;#333333&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;!-- Performance Badge --&gt;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/performanceBadge&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; ОТЛИЧНО!&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#FF9800&quot;&#10;                        android:background=&quot;@drawable/badge_background&quot;&#10;                        android:padding=&quot;6dp&quot;&#10;                        android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/ScrollView&gt;&#10;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;!-- Right Block - Congratulations and Motivation --&gt;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginStart=&quot;6dp&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;8dp&quot;&#10;            app:cardBackgroundColor=&quot;#FFFFFF&quot;&gt;&#10;&#10;            &lt;ScrollView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&#10;                    android:gravity=&quot;center_horizontal&quot;&gt;&#10;&#10;                    &lt;!-- Congratulations Icon --&gt;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/congratulationsIcon&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;48sp&quot;&#10;                        android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;!-- Main Message --&gt;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/messageDisplay&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Поздравляем! Ты отлично справился с упражнением!&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;#1565C0&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;!-- Motivational Message --&gt;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/motivationalMessage&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Ты становишься настоящим математиком! Продолжай изучать числа и их сравнение.&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textColor=&quot;#666666&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;!-- Achievement Stars --&gt;&#10;                    &lt;LinearLayout&#10;                        android:id=&quot;@+id/achievementStars&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:gravity=&quot;center&quot;&gt;&#10;                        &lt;!-- Звезды будут добавлены программно --&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/ScrollView&gt;&#10;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Bottom Buttons --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/restartButton&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;6dp&quot;&#10;            android:text=&quot; Играть снова&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:background=&quot;@drawable/button_check&quot;&#10;            android:elevation=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/homeButton&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginStart=&quot;6dp&quot;&#10;            android:text=&quot; На главную&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:background=&quot;@drawable/button_next&quot;&#10;            android:elevation=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_number_sequence_results.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_number_sequence_results.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>