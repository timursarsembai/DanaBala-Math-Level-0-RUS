package com.timursarsembayev.danabalanumbers

import android.animation.AnimatorSet
import android.animation.ObjectAnimator
import android.content.ClipData
import android.content.Intent
import android.content.pm.ActivityInfo
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.view.DragEvent
import android.view.MotionEvent
import android.view.View
import android.widget.LinearLayout
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Button
import android.widget.ImageButton
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import java.util.*
import kotlin.random.Random

class NumberComparisonActivity : AppCompatActivity(), TextToSpeech.OnInitListener {

    private var tts: TextToSpeech? = null
    private var currentQuestion = 0
    private var score = 0
    private var totalCorrectAnswers = 0
    private val totalQuestions = 20
    private var hasTriedCurrentQuestion = false

    // UI —ç–ª–µ–º–µ–Ω—Ç—ã
    private lateinit var progressBar: ProgressBar
    private lateinit var questionText: TextView
    private lateinit var leftNumberDisplay: TextView
    private lateinit var rightNumberDisplay: TextView
    private lateinit var leftObjectsDisplay: TextView
    private lateinit var rightObjectsDisplay: TextView
    private lateinit var comparisonDropZone: TextView
    private lateinit var checkButton: Button
    private lateinit var nextButton: Button
    private lateinit var hintText: TextView
    private lateinit var comparisonSymbolsContainer: LinearLayout

    // –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
    private var leftNumber = 0
    private var rightNumber = 0
    private var correctComparison = ""
    private var currentObjectType = ""
    private var selectedSymbol = ""

    // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Ö–≤–∞–ª—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    private val correctPhrases = listOf(
        "–ú–æ–ª–æ–¥–µ—Ü!", "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!", "–û—Ç–ª–∏—á–Ω–æ!",
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!", "–¢—ã —Å—É–ø–µ—Ä!", "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!", "–ë—Ä–∞–≤–æ!",
        "–£–º–Ω–∏—Ü–∞!", "–ó–¥–æ—Ä–æ–≤–æ!"
    )

    // –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    private val objectEmojis = arrayOf(
        "üçé", "üçå", "üçá", "üçì", "üçí", "ü•ï", "ü•í", "üçÖ",
        "‚öΩ", "üèÄ", "üéæ", "üèê", "üéà", "üéÅ", "üéÇ", "üé®",
        "üåü", "‚≠ê", "‚ú®", "üå∫", "üå∏", "üåº", "üåª", "üåπ"
    )

    // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–±—É–∂–¥–∞—é—â–∏—Ö —Ñ—Ä–∞–∑ –¥–ª—è –æ–∑–≤—É—á–∫–∏
    private val encouragementPhrases = listOf(
        "–¢—ã —É–≤–µ—Ä–µ–Ω? –ü—Ä–æ–≤–µ—Ä—å!",
        "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —ç—Ç–æ? –ü–æ–¥—É–º–∞–π –µ—â–µ —Ä–∞–∑!",
        "–¢–æ—á–Ω–æ —Ç–∞–∫? –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º!",
        "–£–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ? –ù–∞–∂–º–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!",
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ—Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!",
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä? –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º!",
        "–¢–∞–∫ –ª–∏ —ç—Ç–æ? –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–º–µ—Å—Ç–µ!",
        "–°–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ç–≤–µ—Ç–æ–º? –ñ–º–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!",
        "–î—É–º–∞–µ—à—å, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ü–æ–ø—Ä–æ–±—É–µ–º!",
        "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É!"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–ª—å–±–æ–º–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE

        setContentView(R.layout.activity_number_comparison)

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        tts = TextToSpeech(this, this)
        initializeViews()
        setupDragAndDrop()
        generateNewQuestion()
    }

    private fun initializeViews() {
        progressBar = findViewById(R.id.progressBar)
        questionText = findViewById(R.id.questionText)
        leftNumberDisplay = findViewById(R.id.leftNumberDisplay)
        rightNumberDisplay = findViewById(R.id.rightNumberDisplay)
        leftObjectsDisplay = findViewById(R.id.leftObjectsDisplay)
        rightObjectsDisplay = findViewById(R.id.rightObjectsDisplay)
        comparisonDropZone = findViewById(R.id.comparisonDropZone)
        checkButton = findViewById(R.id.checkButton)
        nextButton = findViewById(R.id.nextButton)
        hintText = findViewById(R.id.hintText)
        comparisonSymbolsContainer = findViewById(R.id.comparisonSymbolsContainer)

        checkButton.setOnClickListener { checkAnswer() }
        nextButton.setOnClickListener { nextQuestion() }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        findViewById<ImageButton>(R.id.backButton).setOnClickListener {
            finish()
        }

        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
        nextButton.visibility = Button.GONE

        // –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        createComparisonSymbols()
    }

    private fun createComparisonSymbols() {
        val symbols = arrayOf("<", ">", "=")

        symbols.forEach { symbol ->
            val symbolView = TextView(this).apply {
                text = symbol
                textSize = 28f  // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 32f –¥–æ 28f
                setTextColor(ContextCompat.getColor(this@NumberComparisonActivity, android.R.color.black))
                setBackgroundResource(R.drawable.draggable_number_card)
                gravity = android.view.Gravity.CENTER
                setPadding(4, 4, 4, 4)
                includeFontPadding = false

                val layoutParams = LinearLayout.LayoutParams(70, 70).apply {
                    setMargins(8, 4, 8, 4)
                    gravity = android.view.Gravity.CENTER
                }
                this.layoutParams = layoutParams

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag functionality
                setOnTouchListener { view, event ->
                    if (event.action == MotionEvent.ACTION_DOWN) {
                        val clipData = ClipData.newPlainText("symbol", symbol)
                        val shadowBuilder = View.DragShadowBuilder(view)
                        view.startDragAndDrop(clipData, shadowBuilder, view, 0)
                        true
                    } else {
                        false
                    }
                }
            }
            comparisonSymbolsContainer.addView(symbolView)
        }
    }

    private fun setupDragAndDrop() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drop zone –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparisonDropZone.setOnDragListener { view, event ->
            when (event.action) {
                DragEvent.ACTION_DRAG_STARTED -> true
                DragEvent.ACTION_DRAG_ENTERED -> {
                    view.setBackgroundResource(R.drawable.number_drop_zone_highlight)
                    true
                }
                DragEvent.ACTION_DRAG_EXITED -> {
                    resetDropZoneBackground()
                    true
                }
                DragEvent.ACTION_DROP -> {
                    val symbol = event.clipData.getItemAt(0).text.toString()
                    handleSymbolDrop(symbol)
                    true
                }
                DragEvent.ACTION_DRAG_ENDED -> {
                    resetDropZoneBackground()
                    true
                }
                else -> false
            }
        }

        // –ö–ª–∏–∫ –ø–æ drop zone –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–∏–º–≤–æ–ª–∞
        comparisonDropZone.setOnClickListener {
            returnSymbolToContainer()
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ drop zone –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        comparisonSymbolsContainer.setOnDragListener { view, event ->
            when (event.action) {
                DragEvent.ACTION_DRAG_STARTED -> true
                DragEvent.ACTION_DRAG_ENTERED -> {
                    view.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_blue_light))
                    view.alpha = 0.3f
                    true
                }
                DragEvent.ACTION_DRAG_EXITED -> {
                    view.setBackgroundColor(android.graphics.Color.TRANSPARENT)
                    view.alpha = 1.0f
                    true
                }
                DragEvent.ACTION_DROP -> {
                    view.setBackgroundColor(android.graphics.Color.TRANSPARENT)
                    view.alpha = 1.0f
                    returnSymbolToContainer()
                    true
                }
                DragEvent.ACTION_DRAG_ENDED -> {
                    view.setBackgroundColor(android.graphics.Color.TRANSPARENT)
                    view.alpha = 1.0f
                    true
                }
                else -> false
            }
        }
    }

    private fun handleSymbolDrop(symbol: String) {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–∏–º–≤–æ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (selectedSymbol.isNotEmpty()) {
            returnSymbolToContainer()
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        selectedSymbol = symbol
        comparisonDropZone.text = symbol
        comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone_filled)

        // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        removeSymbolFromContainer(symbol)

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        checkButton.isEnabled = true

        // –û–∑–≤—É—á–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
        speakComparisonQuestion(symbol)
    }

    private fun returnSymbolToContainer() {
        if (selectedSymbol.isNotEmpty()) {
            // –û—á–∏—â–∞–µ–º drop zone
            comparisonDropZone.text = ""
            comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone)

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º–≤–æ–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            addSymbolToContainer(selectedSymbol)

            selectedSymbol = ""
            checkButton.isEnabled = false
        }
    }

    private fun removeSymbolFromContainer(symbol: String) {
        for (i in 0 until comparisonSymbolsContainer.childCount) {
            val child = comparisonSymbolsContainer.getChildAt(i) as TextView
            if (child.text.toString() == symbol) {
                comparisonSymbolsContainer.removeView(child)
                break
            }
        }
    }

    private fun addSymbolToContainer(symbol: String) {
        val symbolView = TextView(this).apply {
            text = symbol
            textSize = 28f  // –ò–∑–º–µ–Ω–∏–ª–∏ —Å 32f –Ω–∞ 28f –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            setTextColor(ContextCompat.getColor(this@NumberComparisonActivity, android.R.color.black))
            setBackgroundResource(R.drawable.draggable_number_card)
            gravity = android.view.Gravity.CENTER
            setPadding(4, 4, 4, 4)
            includeFontPadding = false

            val layoutParams = LinearLayout.LayoutParams(70, 70).apply {
                setMargins(8, 4, 8, 4)
                gravity = android.view.Gravity.CENTER
            }
            this.layoutParams = layoutParams

            setOnTouchListener { view, event ->
                if (event.action == MotionEvent.ACTION_DOWN) {
                    val clipData = ClipData.newPlainText("symbol", symbol)
                    val shadowBuilder = View.DragShadowBuilder(view)
                    view.startDragAndDrop(clipData, shadowBuilder, view, 0)
                    true
                } else {
                    false
                }
            }
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        val symbols = arrayOf("<", ">", "=")
        val position = symbols.indexOf(symbol)
        if (position != -1 && position <= comparisonSymbolsContainer.childCount) {
            comparisonSymbolsContainer.addView(symbolView, position)
        } else {
            comparisonSymbolsContainer.addView(symbolView)
        }
    }

    private fun resetDropZoneBackground() {
        if (comparisonDropZone.text.isEmpty()) {
            comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone)
        } else {
            comparisonDropZone.setBackgroundResource(R.drawable.number_drop_zone_filled)
        }
    }

    private fun generateNewQuestion() {
        hasTriedCurrentQuestion = false
        checkButton.isEnabled = false
        nextButton.visibility = Button.GONE

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        returnSymbolToContainer()

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 9
        do {
            leftNumber = Random.nextInt(10)
            rightNumber = Random.nextInt(10)
        } while (leftNumber == rightNumber) // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —á–∏—Å–ª–∞ —Ä–∞–∑–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞

        // –í 30% —Å–ª—É—á–∞–µ–≤ –¥–µ–ª–∞–µ–º —á–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã–º–∏
        if (Random.nextFloat() < 0.3f) {
            rightNumber = leftNumber
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—ä–µ–∫—Ç
        currentObjectType = objectEmojis[Random.nextInt(objectEmojis.size)]

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        correctComparison = when {
            leftNumber < rightNumber -> "<"
            leftNumber > rightNumber -> ">"
            else -> "="
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        leftNumberDisplay.text = leftNumber.toString()
        rightNumberDisplay.text = rightNumber.toString()

        leftObjectsDisplay.text = generateObjects(leftNumber)
        rightObjectsDisplay.text = generateObjects(rightNumber)

        updateProgress()
        updateQuestionText()
        speakQuestion()
    }

    private fun generateObjects(count: Int): String {
        if (count == 0) return ""

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        return currentObjectType.repeat(count)
    }

    private fun updateQuestionText() {
        questionText.text = "–°—Ä–∞–≤–Ω–∏ —á–∏—Å–ª–∞"
        hintText.text = "–ü–µ—Ä–µ—Ç–∞—â–∏ —Å–∏–º–≤–æ–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä"
    }

    private fun updateProgress() {
        progressBar.progress = ((currentQuestion.toFloat() / totalQuestions) * 100).toInt()
    }

    private fun checkAnswer() {
        if (!hasTriedCurrentQuestion) {
            hasTriedCurrentQuestion = true
        }

        if (selectedSymbol == correctComparison) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            score += 100
            totalCorrectAnswers++
            showCorrectFeedback()
            checkButton.isEnabled = false
            nextButton.visibility = Button.VISIBLE

            comparisonDropZone.setBackgroundResource(R.drawable.number_input_correct)
            animateCorrectAnswer(comparisonDropZone)
        } else {
            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            showIncorrectFeedback()
            comparisonDropZone.setBackgroundResource(R.drawable.number_input_incorrect)
            animateIncorrectAnswer(comparisonDropZone)
        }
    }

    private fun showCorrectFeedback() {
        val phrase = correctPhrases.random()
        hintText.text = phrase
        hintText.setTextColor(ContextCompat.getColor(this, android.R.color.holo_green_dark))
        speakText(phrase)
    }

    private fun showIncorrectFeedback() {
        hintText.text = "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –°—Ä–∞–≤–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤."
        hintText.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))
        speakText("–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    }

    private fun nextQuestion() {
        currentQuestion++

        if (currentQuestion >= totalQuestions) {
            finishGame()
        } else {
            generateNewQuestion()
        }
    }

    private fun finishGame() {
        val intent = Intent(this, NumberComparisonResultsActivity::class.java)
        intent.putExtra("score", score)
        intent.putExtra("totalCorrectAnswers", totalCorrectAnswers)
        intent.putExtra("totalQuestions", totalQuestions)
        startActivity(intent)
        finish()
    }

    private fun animateCorrectAnswer(view: TextView) {
        val scaleX = ObjectAnimator.ofFloat(view, "scaleX", 1f, 1.2f, 1f)
        val scaleY = ObjectAnimator.ofFloat(view, "scaleY", 1f, 1.2f, 1f)
        val animatorSet = AnimatorSet()
        animatorSet.playTogether(scaleX, scaleY)
        animatorSet.duration = 300
        animatorSet.start()
    }

    private fun animateIncorrectAnswer(view: TextView) {
        val shake = ObjectAnimator.ofFloat(view, "translationX", 0f, -10f, 10f, -5f, 5f, 0f)
        shake.duration = 500
        shake.start()
    }

    private fun speakQuestion() {
        val leftDescription = if (leftNumber == 0) "–Ω–æ–ª—å" else "$leftNumber"
        val rightDescription = if (rightNumber == 0) "–Ω–æ–ª—å" else "$rightNumber"
        speakText("–°—Ä–∞–≤–Ω–∏ —á–∏—Å–ª–∞ $leftDescription –∏ $rightDescription")
    }

    private fun speakComparisonQuestion(symbol: String) {
        val leftDescription = getNumberDescription(leftNumber)
        val rightDescription = getNumberDescription(rightNumber)

        val symbolDescription = when (symbol) {
            "<" -> "–º–µ–Ω—å—à–µ"
            ">" -> "–±–æ–ª—å—à–µ"
            "=" -> "—Ä–∞–≤–Ω–æ"
            else -> symbol
        }

        val encouragement = encouragementPhrases.random()
        val questionText = "$leftDescription $symbolDescription $rightDescription? $encouragement"
        speakText(questionText)
    }

    private fun getNumberDescription(number: Int): String {
        return when (number) {
            0 -> "–Ω–æ–ª—å"
            1 -> "–æ–¥–∏–Ω"
            2 -> "–¥–≤–∞"
            3 -> "—Ç—Ä–∏"
            4 -> "—á–µ—Ç—ã—Ä–µ"
            5 -> "–ø—è—Ç—å"
            6 -> "—à–µ—Å—Ç—å"
            7 -> "—Å–µ–º—å"
            8 -> "–≤–æ—Å–µ–º—å"
            9 -> "–¥–µ–≤—è—Ç—å"
            else -> number.toString()
        }
    }

    private fun speakText(text: String) {
        tts?.speak(text, TextToSpeech.QUEUE_FLUSH, null, null)
    }

    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            val result = tts!!.setLanguage(Locale("ru", "RU"))
            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                tts!!.setLanguage(Locale.getDefault())
            }
            speakQuestion()
        }
    }

    override fun onDestroy() {
        tts?.stop()
        tts?.shutdown()
        super.onDestroy()
    }
}
