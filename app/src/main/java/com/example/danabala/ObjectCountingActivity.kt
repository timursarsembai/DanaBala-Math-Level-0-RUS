package com.example.danabala

import android.animation.AnimatorSet
import android.animation.ObjectAnimator
import android.content.Intent
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.ProgressBar
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.cardview.widget.CardView
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import java.util.*
import kotlin.random.Random

class ObjectCountingActivity : AppCompatActivity(), TextToSpeech.OnInitListener {

    private var tts: TextToSpeech? = null
    private var currentQuestion = 0
    private var score = 0
    private var totalCorrectAnswers = 0
    private val totalQuestions = 20
    private var currentCorrectAnswer = 0
    private var hasTriedCurrentQuestion = false
    private var targetNumber = 0

    // –ú–∞—Å—Å–∏–≤—ã —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    private val fruits = listOf("üçé", "üçå", "üçä", "üçá", "üçì", "ü•ù", "üçë", "üçí")
    private val vegetables = listOf("ü•ï", "ü•í", "üå∂Ô∏è", "üåΩ", "ü•î", "üßÑ", "üßÖ", "ü•¨")
    private val animals = listOf("üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº")
    private val objects = listOf("‚öΩ", "üèÄ", "üéà", "üéÅ", "üéÇ", "üß∏", "üöó", "‚úàÔ∏è")

    private val allCategories = listOf(fruits, vegetables, animals, objects)

    // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Ö–≤–∞–ª—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    private val correctPhrases = listOf(
        "–ú–æ–ª–æ–¥–µ—Ü!",
        "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
        "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!",
        "–û—Ç–ª–∏—á–Ω–æ!",
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!",
        "–¢—ã —Å—É–ø–µ—Ä!",
        "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!",
        "–ë—Ä–∞–≤–æ!",
        "–£–º–Ω–∏—Ü–∞!",
        "–ó–¥–æ—Ä–æ–≤–æ!"
    )

    // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–Ω–∏—è –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    private val incorrectPhrases = listOf(
        "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! –£ —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è!",
        "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –¢—ã –º–æ–∂–µ—à—å!",
        "–ü–æ–¥—É–º–∞–π –µ—â—ë –Ω–µ–º–Ω–æ–∂–∫–æ!",
        "–ü–æ—á—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
        "–î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑! –í—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!",
        "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç!",
        "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!",
        "–î—É–º–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!",
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–æ—á–∫—É!",
        "–¢—ã —É–º–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_object_counting)

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS
        tts = TextToSpeech(this, this)

        setupBackButton()

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        startNewQuestion()
    }

    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            tts?.language = Locale.forLanguageTag("ru-RU")
        }
    }

    private fun setupBackButton() {
        findViewById<ImageView>(R.id.btnBack).setOnClickListener {
            finish()
        }
    }

    private fun startNewQuestion() {
        if (currentQuestion >= totalQuestions) {
            showResultsScreen()
            return
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        hasTriedCurrentQuestion = false

        // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
        if (currentQuestion == 0) {
            findViewById<LinearLayout>(R.id.loadingContainer).visibility = android.view.View.VISIBLE
            findViewById<LinearLayout>(R.id.gameContainer).visibility = android.view.View.GONE

            findViewById<LinearLayout>(R.id.loadingContainer).postDelayed({
                generateQuestion()
                findViewById<LinearLayout>(R.id.loadingContainer).visibility = android.view.View.GONE
                findViewById<LinearLayout>(R.id.gameContainer).visibility = android.view.View.VISIBLE
            }, 1000)
        } else {
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
            generateQuestion()
        }
    }

    private fun generateQuestion() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9
        targetNumber = Random.nextInt(1, 10)

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        val progressBar = findViewById<ProgressBar>(R.id.progressBar)
        progressBar.progress = (currentQuestion * 100) / totalQuestions

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–º–æ–¥–∑–∏
        val selectedCategory = allCategories.random()
        val selectedEmoji = selectedCategory.random()

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –≤–æ–ø—Ä–æ—Å–µ
        val emojiString = selectedEmoji.repeat(targetNumber)
        findViewById<TextView>(R.id.questionObjects).text = emojiString

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (—á–∏—Å–ª–∞)
        val answers = generateAnswerOptions(targetNumber)

        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
        val cards = listOf(
            findViewById<CardView>(R.id.answer1),
            findViewById<CardView>(R.id.answer2),
            findViewById<CardView>(R.id.answer3),
            findViewById<CardView>(R.id.answer4)
        )

        val answerTexts = listOf(
            findViewById<TextView>(R.id.answerText1),
            findViewById<TextView>(R.id.answerText2),
            findViewById<TextView>(R.id.answerText3),
            findViewById<TextView>(R.id.answerText4)
        )

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–∏—Å–ª–∞–º–∏
        for (i in 0..3) {
            answerTexts[i].text = answers[i].toString()

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
            cards[i].setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
            animateCardEntrance(cards[i], i * 100L)

            cards[i].setOnClickListener {
                checkAnswer(answers[i], cards[i])
            }
        }
    }

    private fun animateCardEntrance(card: CardView, delay: Long) {
        card.alpha = 0f
        card.scaleX = 0.5f
        card.scaleY = 0.5f

        card.animate()
            .alpha(1f)
            .scaleX(1f)
            .scaleY(1f)
            .setDuration(300)
            .setStartDelay(delay)
            .start()
    }

    private fun generateAnswerOptions(correctAnswer: Int): List<Int> {
        val answers = mutableListOf<Int>()

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers.add(correctAnswer)

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
        val usedNumbers = mutableSetOf(correctAnswer)

        while (answers.size < 4) {
            val wrongAnswer = Random.nextInt(1, 10)
            if (wrongAnswer !in usedNumbers) {
                answers.add(wrongAnswer)
                usedNumbers.add(wrongAnswer)
            }
        }

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        answers.shuffle()

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        currentCorrectAnswer = answers.indexOf(correctAnswer)

        return answers
    }

    private fun checkAnswer(selectedAnswer: Int, selectedCard: CardView) {
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç –Ω–∞–∂–∞—Ç–∏–π
        disableAllCards()

        if (selectedAnswer == targetNumber) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            totalCorrectAnswers++

            // –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–æ–ø—ã—Ç–æ–∫
            if (!hasTriedCurrentQuestion) {
                score++
            }

            animateCorrectAnswer(selectedCard)

            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –ø–æ—Ö–≤–∞–ª—ã
            val randomPraise = correctPhrases.random()
            tts?.speak(randomPraise, TextToSpeech.QUEUE_FLUSH, null, "correct")

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            selectedCard.postDelayed({
                currentQuestion++
                startNewQuestion()
            }, 2000)
        } else {
            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞
            hasTriedCurrentQuestion = true

            animateWrongAnswer(selectedCard)

            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–Ω–∏—è
            val randomEncouragement = incorrectPhrases.random()
            tts?.speak(randomEncouragement, TextToSpeech.QUEUE_FLUSH, null, "wrong")

            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
            selectedCard.postDelayed({
                enableAllCards()
                resetCardColors()
            }, 2000)
        }
    }

    private fun enableAllCards() {
        val cards = listOf(
            findViewById<CardView>(R.id.answer1),
            findViewById<CardView>(R.id.answer2),
            findViewById<CardView>(R.id.answer3),
            findViewById<CardView>(R.id.answer4)
        )

        cards.forEach { it.isClickable = true }
    }

    private fun resetCardColors() {
        val cards = listOf(
            findViewById<CardView>(R.id.answer1),
            findViewById<CardView>(R.id.answer2),
            findViewById<CardView>(R.id.answer3),
            findViewById<CardView>(R.id.answer4)
        )

        cards.forEach {
            it.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.white))
        }
    }

    private fun disableAllCards() {
        val cards = listOf(
            findViewById<CardView>(R.id.answer1),
            findViewById<CardView>(R.id.answer2),
            findViewById<CardView>(R.id.answer3),
            findViewById<CardView>(R.id.answer4)
        )

        cards.forEach { it.isClickable = false }
    }

    private fun animateCorrectAnswer(card: CardView) {
        // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))

        // –ê–Ω–∏–º–∞—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è
        val scaleUpX = ObjectAnimator.ofFloat(card, "scaleX", 1f, 1.3f)
        val scaleUpY = ObjectAnimator.ofFloat(card, "scaleY", 1f, 1.3f)
        val scaleDownX = ObjectAnimator.ofFloat(card, "scaleX", 1.3f, 1f)
        val scaleDownY = ObjectAnimator.ofFloat(card, "scaleY", 1.3f, 1f)

        val animatorSet = AnimatorSet()
        animatorSet.play(scaleUpX).with(scaleUpY)
        animatorSet.play(scaleDownX).with(scaleDownY).after(scaleUpX)
        animatorSet.duration = 600
        animatorSet.start()
    }

    private fun animateWrongAnswer(card: CardView) {
        // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        card.setCardBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_red_light))

        // –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏
        val shake = ObjectAnimator.ofFloat(card, "translationX", 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)
        shake.duration = 600
        shake.start()
    }

    private fun showResultsScreen() {
        val intent = Intent(this, ResultsActivity::class.java)
        intent.putExtra("SCORE", score)
        intent.putExtra("TOTAL_QUESTIONS", totalQuestions)
        intent.putExtra("TOTAL_CORRECT", totalCorrectAnswers)
        intent.putExtra("EXERCISE_NAME", "–ü–æ—Å—á–∏—Ç–∞–π –ø—Ä–µ–¥–º–µ—Ç—ã")
        startActivity(intent)
        finish()
    }

    override fun onDestroy() {
        tts?.stop()
        tts?.shutdown()
        super.onDestroy()
    }
}
