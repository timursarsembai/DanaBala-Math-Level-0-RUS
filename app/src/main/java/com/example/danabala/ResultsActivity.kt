package com.example.danabala

import android.animation.Animator
import android.animation.AnimatorSet
import android.animation.ObjectAnimator
import android.animation.ValueAnimator
import android.content.Intent
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.view.View
import android.view.animation.AccelerateDecelerateInterpolator
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.cardview.widget.CardView
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import java.util.*
import kotlin.random.Random

class ResultsActivity : AppCompatActivity(), TextToSpeech.OnInitListener {

    private var tts: TextToSpeech? = null
    private val fireworkViews = mutableListOf<View>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_results)

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS
        tts = TextToSpeech(this, this)

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        val score = intent.getIntExtra("score", 0)
        val totalQuestions = intent.getIntExtra("total", 20)

        setupResults(score, totalQuestions)
        setupButtons()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        findViewById<View>(R.id.main).postDelayed({
            startFireworksAnimation()
        }, 500)
    }

    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            tts?.language = Locale.forLanguageTag("ru-RU")

            // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
            val score = intent.getIntExtra("score", 0)
            val total = intent.getIntExtra("total", 20)
            val percentage = (score * 100) / total

            val message = when {
                percentage == 100 -> "–û—Ç–ª–∏—á–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –∏–¥–µ–∞–ª—å–Ω–æ!"
                percentage >= 90 -> "–û—Ç–ª–∏—á–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –ø–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ!"
                percentage >= 80 -> "–ú–æ–ª–æ–¥–µ—Ü! –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
                percentage >= 70 -> "–ú–æ–ª–æ–¥–µ—Ü! –ù–µ–ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
                percentage >= 50 -> "–•–æ—Ä–æ—à–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!"
                else -> "–ù–µ–ø–ª–æ—Ö–æ! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ!"
            }

            tts?.speak(message, TextToSpeech.QUEUE_FLUSH, null, "congratulation")
        }
    }

    private fun setupResults(score: Int, total: Int) {
        val percentage = (score * 100) / total
        val stars = calculateStars(percentage)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞
        findViewById<TextView>(R.id.scoreText).text = "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: $score –∏–∑ $total"
        findViewById<TextView>(R.id.percentageText).text = "$percentage%"

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
        setupStars(stars)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
        val messageText = when {
            stars == 5 -> "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! üèÜ"
            stars == 4 -> "–û—Ç–ª–∏—á–Ω–æ! ‚≠ê"
            stars == 3 -> "–•–æ—Ä–æ—à–æ! üëç"
            stars == 2 -> "–ù–µ–ø–ª–æ—Ö–æ! üòä"
            else -> "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë! üí™"
        }
        findViewById<TextView>(R.id.congratulationText).text = messageText
    }

    private fun calculateStars(percentage: Int): Int {
        return when {
            percentage >= 90 -> 5  // 90% –∏ –≤—ã—à–µ - 5 –∑–≤–µ–∑–¥
            percentage >= 75 -> 4  // 75-89% - 4 –∑–≤–µ–∑–¥—ã
            percentage >= 60 -> 3  // 60-74% - 3 –∑–≤–µ–∑–¥—ã
            percentage >= 45 -> 2  // 45-59% - 2 –∑–≤–µ–∑–¥—ã
            else -> 1              // –º–µ–Ω–µ–µ 45% - 1 –∑–≤–µ–∑–¥–∞
        }
    }

    private fun setupStars(earnedStars: Int) {
        val starViews = listOf(
            findViewById<ImageView>(R.id.star1),
            findViewById<ImageView>(R.id.star2),
            findViewById<ImageView>(R.id.star3),
            findViewById<ImageView>(R.id.star4),
            findViewById<ImageView>(R.id.star5)
        )

        // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –ø–æ –æ–¥–Ω–æ–π
        starViews.forEachIndexed { index, star ->
            star.alpha = 0f
            star.scaleX = 0f
            star.scaleY = 0f

            if (index < earnedStars) {
                // –ó–æ–ª–æ—Ç–∞—è –∑–≤–µ–∑–¥–∞
                star.setImageResource(android.R.drawable.btn_star_big_on)

                star.postDelayed({
                    animateStarAppearance(star)
                }, (index * 200L) + 1000)
            } else {
                // –°–µ—Ä–∞—è –∑–≤–µ–∑–¥–∞
                star.setImageResource(android.R.drawable.btn_star_big_off)

                star.postDelayed({
                    star.animate()
                        .alpha(0.3f)
                        .scaleX(1f)
                        .scaleY(1f)
                        .setDuration(200)
                        .start()
                }, (index * 200L) + 1000)
            }
        }
    }

    private fun animateStarAppearance(star: ImageView) {
        val scaleX = ObjectAnimator.ofFloat(star, "scaleX", 0f, 1.2f, 1f)
        val scaleY = ObjectAnimator.ofFloat(star, "scaleY", 0f, 1.2f, 1f)
        val alpha = ObjectAnimator.ofFloat(star, "alpha", 0f, 1f)

        val animatorSet = AnimatorSet()
        animatorSet.playTogether(scaleX, scaleY, alpha)
        animatorSet.duration = 400
        animatorSet.interpolator = AccelerateDecelerateInterpolator()
        animatorSet.start()
    }

    private fun setupButtons() {
        findViewById<CardView>(R.id.retryButton).setOnClickListener {
            // –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            val intent = Intent(this, NumberRecognitionActivity::class.java)
            startActivity(intent)
            finish()
        }

        findViewById<CardView>(R.id.backToMenuButton).setOnClickListener {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ
            val parentSection = intent.getStringExtra("parentSection") ?: "math"

            val intent = Intent(this, MathExercisesActivity::class.java) // —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP
            startActivity(intent)
            finish()
        }
    }

    private fun startFireworksAnimation() {
        val rootView = findViewById<View>(R.id.main)

        // –°–æ–∑–¥–∞–µ–º 15 —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤
        repeat(15) {
            createFirework(rootView)
        }
    }

    private fun createFirework(parent: View) {
        val firework = View(this)
        firework.setBackgroundResource(android.R.drawable.star_big_on)

        val size = Random.nextInt(20, 40)
        firework.layoutParams = android.widget.FrameLayout.LayoutParams(size, size)

        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        val startX = Random.nextFloat() * parent.width
        val startY = parent.height.toFloat()
        val endY = Random.nextFloat() * (parent.height * 0.6f)

        firework.x = startX
        firework.y = startY
        firework.alpha = 0f

        (parent as android.widget.FrameLayout).addView(firework)
        fireworkViews.add(firework)

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞ –≤–≤–µ—Ä—Ö
        val translateY = ObjectAnimator.ofFloat(firework, "y", startY, endY)
        val alpha = ObjectAnimator.ofFloat(firework, "alpha", 0f, 1f, 0f)
        val scaleX = ObjectAnimator.ofFloat(firework, "scaleX", 0.5f, 1.5f, 0f)
        val scaleY = ObjectAnimator.ofFloat(firework, "scaleY", 0.5f, 1.5f, 0f)

        val animatorSet = AnimatorSet()
        animatorSet.playTogether(translateY, alpha, scaleX, scaleY)
        animatorSet.duration = Random.nextLong(1500, 2500)
        animatorSet.startDelay = Random.nextLong(0, 2000)

        animatorSet.addListener(object : Animator.AnimatorListener {
            override fun onAnimationEnd(animation: Animator) {
                (parent as android.widget.FrameLayout).removeView(firework)
                fireworkViews.remove(firework)
            }
            override fun onAnimationStart(animation: Animator) {}
            override fun onAnimationCancel(animation: Animator) {}
            override fun onAnimationRepeat(animation: Animator) {}
        })

        animatorSet.start()
    }

    override fun onDestroy() {
        tts?.stop()
        tts?.shutdown()

        // –û—á–∏—â–∞–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∏
        fireworkViews.clear()

        super.onDestroy()
    }
}
