package com.example.danabala

import android.content.Intent
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import java.util.Locale
import kotlin.random.Random

class MatchingResultsActivity : AppCompatActivity(), TextToSpeech.OnInitListener {

    private lateinit var tts: TextToSpeech
    private var isTtsReady = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_matching_results)

        initTTS()

        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        val completedLevels = intent.getIntExtra("completed_levels", 0)
        val correctActions = intent.getIntExtra("correct_actions", 0)
        val incorrectActions = intent.getIntExtra("incorrect_actions", 0)
        val finalScore = intent.getIntExtra("final_score", 0)

        val titleText = findViewById<TextView>(R.id.titleText)
        val scoreText = findViewById<TextView>(R.id.scoreText)
        val levelsText = findViewById<TextView>(R.id.levelsText)
        val correctActionsText = findViewById<TextView>(R.id.correctActionsText)
        val incorrectActionsText = findViewById<TextView>(R.id.incorrectActionsText)
        val feedbackText = findViewById<TextView>(R.id.feedbackText)
        val playAgainButton = findViewById<Button>(R.id.playAgainButton)
        val homeButton = findViewById<Button>(R.id.homeButton)

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        scoreText.text = "–ò—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏: $finalScore"
        levelsText.text = "–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: $completedLevels –∏–∑ 10"
        correctActionsText.text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: $correctActions (+${correctActions * 10} –æ—á–∫–æ–≤)"
        incorrectActionsText.text = "‚ùå –û—à–∏–±–æ–∫: $incorrectActions (-${incorrectActions * 5} –æ—á–∫–æ–≤)"

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        val feedback = when {
            finalScore >= 450 -> "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä! üåü"
            finalScore >= 350 -> "–û—Ç–ª–∏—á–Ω–æ! –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëè"
            finalScore >= 250 -> "–•–æ—Ä–æ—à–æ! –¢—ã —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è! üëç"
            finalScore >= 150 -> "–ù–µ–ø–ª–æ—Ö–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è! üìö"
            finalScore >= 50 -> "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è! üí™"
            else -> "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üéØ"
        }
        feedbackText.text = feedback

        // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        speakCongratulation()

        playAgainButton.setOnClickListener {
            stopTTS()
            val intent = Intent(this, MatchingActivity::class.java)
            startActivity(intent)
            finish()
        }

        homeButton.setOnClickListener {
            stopTTS()
            val intent = Intent(this, MathExercisesActivity::class.java)
            startActivity(intent)
            finish()
        }
    }

    private fun initTTS() {
        tts = TextToSpeech(this, this)
    }

    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            val result = tts.setLanguage(Locale("ru"))
            isTtsReady = result != TextToSpeech.LANG_MISSING_DATA && result != TextToSpeech.LANG_NOT_SUPPORTED

            // –ï—Å–ª–∏ TTS –≥–æ—Ç–æ–≤ –∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –æ–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
            if (isTtsReady) {
                speakCongratulation()
            }
        }
    }

    private fun speakCongratulation() {
        if (isTtsReady) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            val correctActions = intent.getIntExtra("correct_actions", 0)
            val incorrectActions = intent.getIntExtra("incorrect_actions", 0)
            val totalActions = correctActions + incorrectActions

            val percentage = if (totalActions > 0) {
                (correctActions * 100) / totalActions
            } else {
                0
            }

            // –í—ã–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            val phrases = when {
                percentage == 100 -> DifferentiatedCongratulationPhrases.perfect100Phrases
                percentage >= 90 -> DifferentiatedCongratulationPhrases.excellent90Phrases
                percentage >= 80 -> DifferentiatedCongratulationPhrases.good80Phrases
                else -> DifferentiatedCongratulationPhrases.encouragement80Phrases
            }

            val randomPhrase = phrases[Random.nextInt(phrases.size)]
            tts.speak(randomPhrase, TextToSpeech.QUEUE_FLUSH, null, null)
        }
    }

    private fun stopTTS() {
        if (::tts.isInitialized) {
            tts.stop()
        }
    }

    override fun onDestroy() {
        if (::tts.isInitialized) {
            tts.stop()
            tts.shutdown()
        }
        super.onDestroy()
    }
}
